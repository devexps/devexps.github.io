"use strict";(self.webpackChunkgo_micro=self.webpackChunkgo_micro||[]).push([[4406],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=o,g=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2805:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={title:"Protobuf specification",description:"The API interface is unified based on HTTP/GRPC, and the protocol is defined through Protobuf, including complete Request/Reply, and corresponding interface error codes (Errors)",keywords:["Go","Go-Micro","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"],sidebar_position:1},i=void 0,l={unversionedId:"guide/api-protobuf",id:"guide/api-protobuf",title:"Protobuf specification",description:"The API interface is unified based on HTTP/GRPC, and the protocol is defined through Protobuf, including complete Request/Reply, and corresponding interface error codes (Errors)",source:"@site/docs-go-micro/guide/api-protobuf.md",sourceDirName:"guide",slug:"/guide/api-protobuf",permalink:"/go-micro/guide/api-protobuf",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Protobuf specification",description:"The API interface is unified based on HTTP/GRPC, and the protocol is defined through Protobuf, including complete Request/Reply, and corresponding interface error codes (Errors)",keywords:["Go","Go-Micro","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"],sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"User Guide",permalink:"/go-micro/category/user-guide"},next:{title:"Dependency Injection",permalink:"/go-micro/guide/wire"}},p={},s=[{value:"Directory structure",id:"directory-structure",level:2},{value:"Package",id:"package",level:2},{value:"go_package",id:"go_package",level:3},{value:"java_package",id:"java_package",level:3},{value:"Version",id:"version",level:2},{value:"Import",id:"import",level:2},{value:"Naming Convention",id:"naming-convention",level:2},{value:"Directory Structure",id:"directory-structure-1",level:3},{value:"File Structure",id:"file-structure",level:3},{value:"Message and Field Naming",id:"message-and-field-naming",level:3},{value:"Repeated Fields",id:"repeated-fields",level:3},{value:"Enums",id:"enums",level:3},{value:"Services",id:"services",level:3},{value:"Comment",id:"comment",level:2},{value:"Example",id:"example",level:2},{value:"References",id:"references",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This documentation mainly revise the Proto specification conventions and specific agreements between multiple languages to help everyone write more standard interfaces."),(0,o.kt)("p",null,"The API interface is unified based on HTTP/GRPC, and the protocol is defined through Protobuf, including complete Request/Reply, and corresponding interface error codes (Errors)."),(0,o.kt)("h2",{id:"directory-structure"},"Directory structure"),(0,o.kt)("p",null,"The API interface could be defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"api")," directory of the project, or could be managed in a unified repository, similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"googleapis"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"envoy-api"),"."),(0,o.kt)("p",null,"For the proto in project, the api should be used as the root of package name."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"go-micro-demo:\n\u251c\u2500\u2500 api // service API definition\n\u2502   \u251c\u2500\u2500 proto\n\u2502   \u2502   \u251c\u2500\u2500 common\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 conf\n\u2502   \u2502   \u2514\u2500\u2500 demo-service\n\u2502   \u2502       \u2514\u2500\u2500 v1\n\u2502   \u2502           \u2514\u2500\u2500 demo.proto\n\u2502   \u251c\u2500\u2500 third_party // third party reference\n")),(0,o.kt)("p",null,"For the proto in unified repository, the repository name should be use as the root of package name."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"go-micro-apis:\n\u251c\u2500\u2500 api // service API definition\n\u2502   \u251c\u2500\u2500 proto\n\u2502   \u2502   \u251c\u2500\u2500 common\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 conf\n\u2502   \u2502   \u2514\u2500\u2500 demo-service\n\u2502   \u2502       \u2514\u2500\u2500 v1\n\u2502   \u2502           \u2514\u2500\u2500 demo.proto\n\u2502   \u251c\u2500\u2500 third_party // third party reference\n")),(0,o.kt)("h2",{id:"package"},"Package"),(0,o.kt)("p",null,"The package name is used to generate gRPC request paths, or reference messages between Protos."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"my.package.v1")," is the API's directory, which defines the API of the services.")),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"// Request URL: /<package_name>.<version>.<service_name>/{method}\npackage <package_name>.<version>;\n")),(0,o.kt)("h3",{id:"go_package"},"go_package"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'option go_package = "github.com/devexps/go-micro/<package_name>;<version>";\n')),(0,o.kt)("h3",{id:"java_package"},"java_package"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'option java_multiple_files = true;\noption java_package = "com.github.gomicro.<package_name>.<version>";\n')),(0,o.kt)("h2",{id:"version"},"Version"),(0,o.kt)("p",null,"The version number marks the incompatible version and always used with ",(0,o.kt)("inlineCode",{parentName:"p"},"<package_name>"),".\nWhen the API needs to be refactored, the incompatible structure should be updated."),(0,o.kt)("h2",{id:"import"},"Import"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The proto dependencies' import path should be started from the root path."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"third_party")," folder, always includes the proto from third-party such as ",(0,o.kt)("inlineCode",{parentName:"li"},"protobuf"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"google rpc"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"google apis"),", etc.")),(0,o.kt)("h2",{id:"naming-convention"},"Naming Convention"),(0,o.kt)("h3",{id:"directory-structure-1"},"Directory Structure"),(0,o.kt)("p",null,"The package name should be lower-case, and consist with the project directory structure.\nFor example: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"// project directory structure: my/package/v1/\npackage my.package.v1;\n")),(0,o.kt)("h3",{id:"file-structure"},"File Structure"),(0,o.kt)("p",null,"The name of proto files should be ",(0,o.kt)("inlineCode",{parentName:"p"},"lower_snack_case.proto"),".\nThe contents of proto file should be ordered in the following below:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Licence header (if applicable)"),(0,o.kt)("li",{parentName:"ol"},"File overview"),(0,o.kt)("li",{parentName:"ol"},"Syntax"),(0,o.kt)("li",{parentName:"ol"},"Package"),(0,o.kt)("li",{parentName:"ol"},"Imports (sorted)"),(0,o.kt)("li",{parentName:"ol"},"File options"),(0,o.kt)("li",{parentName:"ol"},"Everything else")),(0,o.kt)("h3",{id:"message-and-field-naming"},"Message and Field Naming"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"CamelCase")," (with an initial capital) for message names, for example: ",(0,o.kt)("inlineCode",{parentName:"p"},"LoginRequest")),(0,o.kt)("p",null,"User ",(0,o.kt)("inlineCode",{parentName:"p"},"underscore_seperated_names")," for field names, including ",(0,o.kt)("inlineCode",{parentName:"p"},"oneof")," field and extension names, for example: ",(0,o.kt)("inlineCode",{parentName:"p"},"user_name")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"message LoginRequest {\n  required string user_name = 1;\n}\n")),(0,o.kt)("h3",{id:"repeated-fields"},"Repeated Fields"),(0,o.kt)("p",null,"Use pluralized names for repeated fields"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"message LoginReply {\n  repeated string keys = 1;\n  //...\n  repeated Account accounts = 20;\n}\n")),(0,o.kt)("h3",{id:"enums"},"Enums"),(0,o.kt)("p",null,"Use CamelCae for enum type names and ",(0,o.kt)("inlineCode",{parentName:"p"},"CAPITALS_WITH_UNDERSCORES")," for value names:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"enum FooBar {\n  FOO_BAR_UNSPECIFIED = 0;\n  FOO_BAR_FIRST_VALUE = 1;\n  FOO_BAR_SECOND_VALUE = 2;\n}\n")),(0,o.kt)("p",null,"Each enum value should end with a semicolon, not a comma.\nPrefer prefixing enum values rather than surrounding them with a wrapping message.\nThe zero value enum should have the suffix ",(0,o.kt)("inlineCode",{parentName:"p"},"UNSPECIFIED"),"."),(0,o.kt)("h3",{id:"services"},"Services"),(0,o.kt)("p",null,"If your ",(0,o.kt)("inlineCode",{parentName:"p"},".proto")," defines a RPC service, you should use CamelCase for both the service name and all RPC method names."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},"service FooService {\n  rpc GetFoo(GetFooRequest) returns (GetFooReply);\n  rpc ListFoo(ListFooRequest) returns (ListFooReply);\n}\n")),(0,o.kt)("h2",{id:"comment"},"Comment"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Service")," describes the information of this service."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Method")," describes the information of this API."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Field")," describes the information of this field.")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Service API Definition (demo.proto)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-protobuf"},'syntax = "proto3";\n\npackage gomicro.demo.v1;\n\n// import block\n// ...\n\noption go_package = "github.com/devexps/go-micro/demo/v1;v1";\noption java_multiple_files = true;\noption java_package = "com.github.devexps.gomicro.demo.v1";\n\n// Definition of the service\nservice Greeter {\n  // definition the function of API\n  rpc SayHello (HelloRequest) returns (HelloReply);\n}\n\n// the request of Hello\nmessage HelloRequest {\n  // user\'s name\n  string name = 1;\n}\n\n// the response of Hello\nmessage HelloReply {\n  // result data\n  string message = 1;\n}\n')),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://google.aip.dev/"},"https://google.aip.dev/")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://protobuf.dev/programming-guides/style/"},"https://protobuf.dev/programming-guides/style/")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://protobuf.dev/programming-guides/proto3/"},"https://protobuf.dev/programming-guides/proto3/"))))}d.isMDXComponent=!0}}]);