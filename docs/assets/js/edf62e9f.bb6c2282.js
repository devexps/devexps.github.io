"use strict";(self.webpackChunkgo_micro=self.webpackChunkgo_micro||[]).push([[1799],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(n),m=r,h=p["".concat(u,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2261:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={title:"Flutter execute code with MicroTask queue and Event queue",description:"Flutter execute code with MicroTask queue and Event queue",tags:["flutter","microtask","queue","event"],hide_table_of_contents:!1},i=void 0,l={permalink:"/2019/08/27/flutter-execute-code-with-microtask-queue-and-event-queue",source:"@site/blog/2019-08-27-flutter-execute-code-with-microtask-queue-and-event-queue.md",title:"Flutter execute code with MicroTask queue and Event queue",description:"Flutter execute code with MicroTask queue and Event queue",date:"2019-08-27T00:00:00.000Z",formattedDate:"August 27, 2019",tags:[{label:"flutter",permalink:"/tags/flutter"},{label:"microtask",permalink:"/tags/microtask"},{label:"queue",permalink:"/tags/queue"},{label:"event",permalink:"/tags/event"}],readingTime:2.69,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Flutter execute code with MicroTask queue and Event queue",description:"Flutter execute code with MicroTask queue and Event queue",tags:["flutter","microtask","queue","event"],hide_table_of_contents:!1},prevItem:{title:"Docker Tutorial for Beginners",permalink:"/2019/09/04/docker-tutorial-for-beginners"},nextItem:{title:"Localization & switching locales in Flutter",permalink:"/2019/08/27/localization-and-switching-locales-in-flutter"}},u={authorsImageUrls:[]},s=[{value:"Dart is a single threaded language",id:"dart-is-a-single-threaded-language",level:3},{value:"The Dart execution model",id:"the-dart-execution-model",level:3},{value:"MicroTask Queue",id:"microtask-queue",level:3},{value:"Event Queue",id:"event-queue",level:3}],c={toc:s},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"dart-is-a-single-threaded-language"},"Dart is a single threaded language"),(0,r.kt)("p",null,"First thing, everyone need to known that Dart is ",(0,r.kt)("strong",{parentName:"p"},"a single thread")," and Flutter replies on Dart."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"IMPORTANT")),(0,r.kt)("br",{parentName:"p"}),"\n","Dart executes ",(0,r.kt)("strong",{parentName:"p"},"one operation at a time, one after the other")," meaning that as long as one operation is executing, it cannot be interrupted by any other Dart code.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"void myLoop(){\n    for (int i = 0; i < 1000; i++){\n        _doSomething();\n    }\n}\n")),(0,r.kt)("p",null,"In the example above, the execution of the ",(0,r.kt)("inlineCode",{parentName:"p"},"myLoop()")," method will never be interrupted until it completes. As a consequence, if this method takes some time, the thread will be ",(0,r.kt)("inlineCode",{parentName:"p"},"\u201cblocked\u201d")," during the whole method execution complete, the application will be ",(0,r.kt)("inlineCode",{parentName:"p"},'"blocked"')," during too."),(0,r.kt)("h3",{id:"the-dart-execution-model"},"The Dart execution model"),(0,r.kt)("img",{src:"/assets/thoughts/flutter-mobile/flutter-thread/dart-start-app.png",width:"100%",alt:"Flutter (or any Dart) app start"}),(0,r.kt)("p",null,"When start a Flutter (",(0,r.kt)("em",{parentName:"p"},"or any Dart"),") application, a new ",(0,r.kt)("strong",{parentName:"p"},"Thread")," process (in Dart language call ",(0,r.kt)("em",{parentName:"p"},"isolate"),") is created and Launched. This thread will be only one that you need to care for the entire application."),(0,r.kt)("p",null,"After ",(0,r.kt)("strong",{parentName:"p"},"main thread")," created, Dart automatically:  "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"initializes 2 Queues, namely ",(0,r.kt)("inlineCode",{parentName:"li"},"\u201cMicroTask\u201d")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"\u201cEvent\u201d")," FIFO queues;"),(0,r.kt)("li",{parentName:"ol"},"executes the ",(0,r.kt)("strong",{parentName:"li"},"main()")," method and, once this code execution is completed;"),(0,r.kt)("li",{parentName:"ol"},"launches the ",(0,r.kt)("inlineCode",{parentName:"li"},"Event Loop"))),(0,r.kt)("img",{src:"/assets/thoughts/flutter-mobile/flutter-thread/dart-event-loop.png",width:"100%",alt:"Flutter (or any Dart) app start"}),(0,r.kt)("p",null,"During the whole life of the thread, a single internal and invisible process, called the ",(0,r.kt)("inlineCode",{parentName:"p"},"\u201cEvent Loop\u201d"),", will drive the way your code will be executed and in which sequence order, depending on the content of both ",(0,r.kt)("strong",{parentName:"p"},"MicroTask Queue")," and ",(0,r.kt)("strong",{parentName:"p"},"Event")," queues."),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"Event Loop")," corresponds to some kind of ",(0,r.kt)("strong",{parentName:"p"},"infinite")," loop, cadence by an internal clock which, at each tick, if no other Dart code is being executed, does something like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"static void eventLoop() {\n    while (microTaskQueue.isNotEmpty){\n        fetchFirstMicroTaskFromQueue();\n        executeThisMicroTask();\n        return;\n    }\n\n    if (eventQueue.isNotEmpty){\n        fetchFirstEventFromQueue();\n        executeThisEventRelatedCode();\n    }\n}\n")),(0,r.kt)("p",null,"As we can see the MicroTask Queue has precedence over the Event Queue."),(0,r.kt)("h3",{id:"microtask-queue"},"MicroTask Queue"),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"MicroTask")," queue is used for ",(0,r.kt)("strong",{parentName:"p"},"very short")," internal actions that need to be run ",(0,r.kt)("em",{parentName:"p"},"asynchronously"),", right after something else completes and before giving the hand back to the Event queue."),(0,r.kt)("p",null,"As an example of a ",(0,r.kt)("em",{parentName:"p"},"MicroTask")," you could imagine having to dispose a resource, right after it has been closed. As the closure process could take some time to complete, you could write something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"    MyResource myResource;\n\n    //...\n\n    void closeAndRelease() {\n        scheduleMicroTask(_dispose);\n        _close();\n    }\n\n    void _close(){\n        // The code to be run synchronously\n        // to close the resource\n        //...\n    }\n\n    void _dispose(){\n        // The code which has to be run\n        // right after the _close()\n        // has completed\n    }\n")),(0,r.kt)("h3",{id:"event-queue"},"Event Queue"),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"Event")," queue is used to reference operations that result from  "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"external events such as  ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"I/O;"),(0,r.kt)("li",{parentName:"ul"},"gesture;"),(0,r.kt)("li",{parentName:"ul"},"drawing;"),(0,r.kt)("li",{parentName:"ul"},"timers;"),(0,r.kt)("li",{parentName:"ul"},"streams;"),(0,r.kt)("li",{parentName:"ul"},"\u2026"))),(0,r.kt)("li",{parentName:"ul"},"futures  ")),(0,r.kt)("p",null,"In fact, each time an ",(0,r.kt)("strong",{parentName:"p"},"external")," event is triggered, the corresponding code to be executed is referenced into the ",(0,r.kt)("em",{parentName:"p"},"Event")," queue."),(0,r.kt)("p",null,"As soon as there is no longer any ",(0,r.kt)("em",{parentName:"p"},"micro task")," to run, the ",(0,r.kt)("em",{parentName:"p"},"Event Loop")," considers the first item in the ",(0,r.kt)("em",{parentName:"p"},"Event")," Queue and will execute it."),(0,r.kt)("p",null,"It is very interesting to note that ",(0,r.kt)("strong",{parentName:"p"},"Futures")," are also handled via the ",(0,r.kt)("em",{parentName:"p"},"Event")," queue."),(0,r.kt)("p",null,"Okay, that's all and I'll see you next article, enjoy!"))}d.isMDXComponent=!0}}]);