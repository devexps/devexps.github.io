"use strict";(self.webpackChunkgo_micro=self.webpackChunkgo_micro||[]).push([[5899],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(a),d=l,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return a?n.createElement(h,r(r({ref:t},c),{},{components:a})):n.createElement(h,r({ref:t},c))}));function h(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=a.length,r=new Array(o);r[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:l,r[1]=i;for(var p=2;p<o;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6534:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(7462),l=(a(7294),a(3905));const o={title:"Localization & switching locales in Flutter",description:"Localization & switching locales in Flutter",tags:["flutter","localization","i18n"],hide_table_of_contents:!1},r=void 0,i={permalink:"/2019/08/27/localization-and-switching-locales-in-flutter",source:"@site/blog/2019-08-27-localization-and-switching-locales-in-flutter.md",title:"Localization & switching locales in Flutter",description:"Localization & switching locales in Flutter",date:"2019-08-27T00:00:00.000Z",formattedDate:"August 27, 2019",tags:[{label:"flutter",permalink:"/tags/flutter"},{label:"localization",permalink:"/tags/localization"},{label:"i18n",permalink:"/tags/i-18-n"}],readingTime:5.825,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Localization & switching locales in Flutter",description:"Localization & switching locales in Flutter",tags:["flutter","localization","i18n"],hide_table_of_contents:!1},prevItem:{title:"Flutter execute code with MicroTask queue and Event queue",permalink:"/2019/08/27/flutter-execute-code-with-microtask-queue-and-event-queue"},nextItem:{title:"First app and basic structure in Flutter",permalink:"/2019/08/25/first-app-and-basic-structure-in-flutter"}},s={authorsImageUrls:[]},p=[],c={toc:p},u="wrapper";function m(e){let{components:t,...a}=e;return(0,l.kt)(u,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"If your app might be deployed to users who speak another language then you'll need to ",(0,l.kt)("strong",{parentName:"p"},"internationalize")," it. You'll need to write the app in a way that makes it possible to ",(0,l.kt)("strong",{parentName:"p"},"localize")," values like text and layouts for each language that the app supports."),(0,l.kt)("p",{align:"center"},(0,l.kt)("img",{src:"/assets/thoughts/flutter-mobile/flutter-localization/flutter_localization_example.gif",width:"320px",alt:"flutter localization example"})),(0,l.kt)("p",null,"So here's an easy step by step tutorial for internationalization of your flutter app, also we'll see how to manually switch your App's Locale on specific events. I'll assume you know ",(0,l.kt)("a",{parentName:"p",href:"/2019/08/25/first-app-and-basic-structure-in-flutter/"},"how to setup a flutter app")," so we\u2019ll skip that part."),(0,l.kt)("p",null,"Localization in Flutter is like any other thing, a Widget. We're going to use the package flutter_localizations that is based on Dart ",(0,l.kt)("a",{parentName:"p",href:"https://pub.dev/packages/intl"},"intl")," package."),(0,l.kt)("p",null,"So first step is to include the packages in ",(0,l.kt)("em",{parentName:"p"},"pubspec.yaml")," file. For that just add the 2 packages name under the dependencies. It would look something like this."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"dependencies:\n  flutter:\n    sdk: flutter\n  flutter_localizations:\n    sdk: flutter\n\ndev_dependencies:  \n  intl_translation: ^0.17.6\n")),(0,l.kt)("p",null,"The first one says our package needs the localization Flutter package to run, and the second give us the tools to generate dart code with the messages from .arb files. You can now use it in your app anywhere simply by importing it. We'll import it in the main.dart file first. Goto your main.dart file and add import the package."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter_localizations/flutter_localizations.dart';\nimport 'package:intl/intl.dart';\n\nvoid main() => runApp(MyApp());\n")),(0,l.kt)("p",null,"The next step is to setup the Localization delegates in your main.dart file. For that you need to specify the 3 delegates, and supported locales."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"return MaterialApp(\n  localizationsDelegates: [\n    GlobalMaterialLocalizations.delegate,\n    GlobalWidgetsLocalizations.delegate,\n    MyLocalizationsDelegate()\n  ],\n  supportedLocales: [\n    const Locale('en', 'US'),\n    const Locale('vi', 'VN'),\n  ],\n  //...\n);\n")),(0,l.kt)("p",null,"As you can see here, we added 3 lists to our Material app localizationsDelegates & supportedLocales. The supportedLocales parameter holds the list of languages that our app will support. Here you will specify list of languages_codes."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"GlobalMaterialLocalizations.delegate")," provides localized strings and other values for the Material Components library."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"GlobalWidgetsLocalizations.delegate")," defines the default text direction, either left to right or right to left, for the widgets library."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"MyLocalizationsDelegate")," to provide this resources to our app.")),(0,l.kt)("p",null,"Next step is to create an ",(0,l.kt)("em",{parentName:"p"},"MyLocalizations")," & ",(0,l.kt)("em",{parentName:"p"},"MyLocalizationsDelegate"),". Classes in which we'll be defining our keywords and their translations. I suggest you create this class in a folder in your lib directory. For example ",(0,l.kt)("em",{parentName:"p"},"/lib/l10n/localization_intl.dart")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter/material.dart';\nimport 'package:intl/intl.dart';\n\nclass MyLocalizations {\n  static Future<MyLocalizations> load(Locale locale) {\n    final String name = locale.countryCode.isEmpty\n      ? locale.languageCode\n      : locale.toString();\n    final String localeName = Intl.canonicalizedLocale(name);\n\n    return initializeMessages(localeName).then((b) {\n      Intl.defaultLocale = localeName;\n      return new MyLocalizations();\n    });\n  }\n\n  static MyLocalizations of(BuildContext context) {\n    return Localizations.of<MyLocalizations>(context, MyLocalizations);\n  }\n\n  //your list of locale here...\n}\n\nclass MyLocalizationsDelegate extends LocalizationsDelegate<MyLocalizations> {\n  const MyLocalizationsDelegate();\n\n  @override\n  bool isSupported(Locale locale) => [\n        'en',\n        'vi'\n      ].contains(locale.languageCode);\n\n  @override\n  Future<MyLocalizations> load(Locale locale) {\n    return MyLocalizations.load(locale);\n  }\n\n  @override\n  bool shouldReload(MyLocalizationsDelegate old) => false;\n}\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("em",{parentName:"p"},"MyLocalizations")," class will only have 2 static methods for now:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"load")," function will load the string resources from the desired Locale as you can see in the parameter."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"of")," function will be a helper to facilitate the access to any string from any part of the app code.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTE"),": ",(0,l.kt)("strong",{parentName:"p"},"initializeMessages")," method will be generated by the ",(0,l.kt)("em",{parentName:"p"},"intl")," tool, note the import ",(0,l.kt)("em",{parentName:"p"},"l10n/messages_all.dart")," , this file contains the method that effectively load the translated messages."),(0,l.kt)("p",null,"The ",(0,l.kt)("strong",{parentName:"p"},"MyLocalizationsDelegate")," can be divided in three main pieces:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"load")," method must return an object that contains a collection of related resources. We return our ",(0,l.kt)("em",{parentName:"li"},"MyLocalizations.load")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"isSupported")," with boolean return type, it returns ",(0,l.kt)("em",{parentName:"li"},"true")," if the app has support for the received ",(0,l.kt)("em",{parentName:"li"},"locale")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"shouldReload")," simply, if this method returns true then all the app widgets will be rebuilt after the ",(0,l.kt)("em",{parentName:"li"},"load")," of resources.")),(0,l.kt)("p",null,"And here, the list of locales in this article:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"//your list of locale here...\n\nString get welcome {\n  return Intl.message(\n    'Hello! ',\n    name: 'welcome',\n    desc: 'welcome',\n  );\n}\n\nString taskItems(int taskNumbers) {\n  return Intl.plural(taskNumbers,\n      zero: \"You have never written a list of tasks.\\nLet's get started soon.\",\n      one: \"This is your todo-list,\\nToday, you have 1 task to complete. \",\n      many: \"This is your todo-list,\\nToday, you have $taskNumbers tasks to complete. \",\n      other: \"This is your todo-list,\\nToday, you have $taskNumbers tasks to complete. \",\n      args: [\n        taskNumbers\n      ],\n      name: \"taskItems\");\n}\n\nString get languageTitle {\n  return Intl.message(\n    'Change Language',\n    name: 'languageTitle',\n    desc: 'languageTitle',\n  );\n}\n")),(0,l.kt)("p",null,"The final step is to create the string translations. Create a ",(0,l.kt)("em",{parentName:"p"},"res directory")," in your project folder. This directory will hold all the translated values as per your Locale. We run this dart intl tool command to generate an ",(0,l.kt)("strong",{parentName:"p"},".arb")," template."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ flutter pub pub run intl_translation:extract_to_arb \\\n  --output-dir=res/ \\\n  lib/l10n/localization_intl.dart\n")),(0,l.kt)("p",null,"This command will generate a file called ",(0,l.kt)("strong",{parentName:"p"},"intl_messages.arb")," file into ",(0,l.kt)("em",{parentName:"p"},"res directory")," and this file serves as a template for the English language, we have to create the desired translations based on this file:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 res\n\u251c\u2500\u2500\u2500\u2500 intl_messages.arb\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"NOTE"),": The Dart intl package only creates one template file of .arb from your MyLocalizations class and names it ",(0,l.kt)("em",{parentName:"p"},"intl_messages.arb"),". From here you now have to manually create other resource files with convention ",(0,l.kt)("em",{parentName:"p"},"intl_","[LANGUAGE_CODE]",".arb")," and copy the content of ",(0,l.kt)("em",{parentName:"p"},"intl_messages.arb")," directly with updated the values."),(0,l.kt)("p",null,"For example, in this article, we'll create files and copy content from ",(0,l.kt)("em",{parentName:"p"},"intl_messages.arb")," like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 res\n\u251c\u2500\u2500\u2500\u2500 intl_messages.arb\n\u251c\u2500\u2500\u2500\u2500 intl_en_US.arb\n\u251c\u2500\u2500\u2500\u2500 intl_vi_VN.arb\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"/res/intl_en_US.arb")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "@@last_modified": "2019-08-27T12:45:48.112434",\n  "welcome": "Hello! ",\n  "@welcome": {\n    "description": "welcome",\n    "type": "text",\n    "placeholders": {}\n  },\n  "taskItems": "{taskNumbers,plural, =0{You have never written a list of tasks.\\nLet\'\'s get started soon.}=1{This is your todo-list,\\nToday, you have 1 task to complete. }many{This is your todo-list,\\nToday, you have {taskNumbers} tasks to complete. }other{This is your todo-list,\\nToday, you have {taskNumbers} tasks to complete. }}",\n  "@taskItems": {\n    "type": "text",\n    "placeholders": {\n      "taskNumbers": {}\n    }\n  },\n  "languageTitle": "Change Language",\n  "@languageTitle": {\n    "description": "languageTitle",\n    "type": "text",\n    "placeholders": {}\n  }\n}\n')),(0,l.kt)("p",null,"Okay, with the translations ready, we are going to link the ",(0,l.kt)("em",{parentName:"p"},"initializeMessages"),". This is made with the follow command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"$ flutter pub pub run intl_translation:generate_from_arb \\\n  --output-dir=lib/l10n \\\n  --no-use-deferred-loading \\\n  lib/l10n/localization_intl.dart \\\n  res/intl_en_US.arb \\\n  res/intl_vi_VN.arb\n")),(0,l.kt)("p",null,"You can see that all the necessary files were generate. In this case, the ",(0,l.kt)("em",{parentName:"p"},"l10n")," directory look like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 l10n\n\u251c\u2500\u2500\u2500\u2500 localization_intl.dart\n\u251c\u2500\u2500\u2500\u2500 messages_all.dart\n\u251c\u2500\u2500\u2500\u2500 messages_en_US.dart\n\u251c\u2500\u2500\u2500\u2500 messages_vi_VN.dart\n")),(0,l.kt)("p",null,"To use language specific text in your app, you'll simply need to follow the two steps:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Import ",(0,l.kt)("em",{parentName:"li"},"MyLocalizations")," class where you want to use the text."),(0,l.kt)("li",{parentName:"ul"},"Call localized value of text via:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"MyLocalizations.of(context).welcome\n// or\nMyLocalizations.of(context).taskItems(model.taskNumbers)\n")),(0,l.kt)("p",null,"When you call the above methods, it calls the getter of the ",(0,l.kt)("em",{parentName:"p"},"MyLocalizations")," class and returns its value based on the Locale of the ",(0,l.kt)("em",{parentName:"p"},"context"),". If the context is en (en_US) it will return the value from ",(0,l.kt)("em",{parentName:"p"},"intl_en_US.dart")," and same things with another Locale."),(0,l.kt)("p",null,"That's all for this article, you can checkout the source code of the example ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/devexps/flutter/tree/master/mobile/flutter_localization"},"at here"),". This localization method is a little bit complicated and also boring but I think this will improve with time."),(0,l.kt)("p",null,"Okay, I'll see you next article and enjoy!"))}m.isMDXComponent=!0}}]);