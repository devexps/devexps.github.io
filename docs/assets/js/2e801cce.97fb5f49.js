"use strict";(self.webpackChunkgo_micro=self.webpackChunkgo_micro||[]).push([[9450],{6029:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/09/09/locally-deploy-docker-development-environment","metadata":{"permalink":"/2023/09/09/locally-deploy-docker-development-environment","source":"@site/blog/2023-09-09-locally-deploy-docker-development-environment.md","title":"Locally deploy Docker development environment","description":"Locally deploy Docker development environment","date":"2023-09-09T00:00:00.000Z","formattedDate":"September 9, 2023","tags":[{"label":"deploy","permalink":"/tags/deploy"},{"label":"docker","permalink":"/tags/docker"},{"label":"development","permalink":"/tags/development"},{"label":"environment","permalink":"/tags/environment"},{"label":"local","permalink":"/tags/local"}],"readingTime":11.84,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Locally deploy Docker development environment","description":"Locally deploy Docker development environment","tags":["deploy","docker","development","environment","local"],"image":"/assets/thoughts/devops/develop_docker_deploy/vng19.jpeg","hide_table_of_contents":false},"nextItem":{"title":"Go-Micro easily connects to the EFK log system","permalink":"/2023/09/06/go-micro-easily-connects-to-efk-log-system"}},"content":"\x3c!--truncate--\x3e\\n\\n## Overview\\n\\n:::tip NOTE\\n\\nBash\'s newlines are `\\\\\\\\`\\n\\nThe newline character of CMD is `\\\\^`\\n\\n:::\\n\\nNeed to set Host:\\n```shell\\n# Added by Docker Desktop\\n192.168.1.6 host.docker.internal\\n192.168.1.6 gateway.docker.internal\\n# To allow the same kube context to work on the host and the container:\\n192.168.1.6 kubernetes.docker.internal\\n# End of section\\n```\\n\\n## Relational Database\\n\\n### MySQL\\n\\n```shell\\ndocker pull bitnami/mysql:latest\\n\\ndocker run -itd \\\\\\n    --name mysql-dev \\\\\\n    -p 3306:3306 \\\\\\n    -e ALLOW_EMPTY_PASSWORD=yes \\\\\\n    -e MYSQL_ROOT_PASSWORD=123456 \\\\\\n    bitnami/mysql:latest\\n```\\n\\n:::note\\n\\nDefault account: `root`\\n\\nDefault password: `123456`\\n\\n:::\\n\\n### PostgreSQL\\n\\n```shell\\ndocker pull bitnami/postgresql:latest\\ndocker pull bitnami/postgresql-repmgr:latest\\ndocker pull bitnami/pgbouncer:latest\\ndocker pull bitnami/pgpool:latest\\ndocker pull bitnami/postgres-exporter:latest\\n\\ndocker run -itd \\\\\\n    --name postgres-dev \\\\\\n    -p 5432:5432 \\\\\\n    -e POSTGRES_PASSWORD=123456 \\\\\\n    bitnami/postgresql:latest\\n\\ndocker exec -it postgres-dev \\"apt update\\"\\n```\\n\\n```sql\\nCREATE EXTENSION IF NOT EXISTS \\"uuid-ossp\\";\\nCREATE EXTENSION IF NOT EXISTS \\"postgis\\";\\n\\nSELECT version();\\nSELECT postgis_full_version();\\n```\\n\\n:::note\\n\\nDefault account: `postgres`\\n\\nDefault password: `123456`\\n\\n:::\\n\\n### MariaDB\\n\\n```shell\\ndocker pull bitnami/mariadb:latest\\n\\ndocker run -itd \\\\\\n    --name mariadb-dev \\\\\\n    -p 3306:3306 \\\\\\n    -e ALLOW_EMPTY_PASSWORD=yes \\\\\\n    -e MARIADB_ROOT_PASSWORD=123456 \\\\\\n    bitnami/mariadb:latest\\n```\\n\\n:::note\\n\\nDefault account: `root`\\n\\nDefault password: `123456`\\n\\n:::\\n\\n### SQLServer\\n\\n```shell\\ndocker pull mcr.microsoft.com/mssql/server:2019-latest\\n\\ndocker run -itd \\\\\\n    --name mssql-dev \\\\\\n    -m 512m \\\\\\n    -e \\"ACCEPT_EULA=Y\\" \\\\\\n    -e \\"SA_PASSWORD=Abcd123456789*\\" \\\\\\n    -p 1433:1433 \\\\\\n    mcr.microsoft.com/mssql/server:2019-latest\\n```\\n\\n### TiDB\\n\\n```shell\\ndocker pull pingcap/tidb:latest\\ndocker pull pingcap/tikv:latest\\ndocker pull pingcap/pd:latest\\n\\ndocker run -itd \\\\\\n    --name tidb-dev \\\\\\n    -v /data/tidb/data:/tmp/tidb \\\\\\n    --privileged=true \\\\\\n    -p 4000:4000 \\\\\\n    -p 10080:10080 \\\\\\n    pingcap/tidb:latest\\n```\\n\\n## Graph database\\n\\n### Neo4J\\n\\n```shell\\ndocker pull bitnami/neo4j:latest\\n\\ndocker run -itd \\\\\\n    --name neo4j-dev \\\\\\n    -p 7473:7473 \\\\\\n    -p 7687:7687 \\\\\\n    -p 7474:7474 \\\\\\n    -e NEO4J_PASSWORD=123456 \\\\\\n    bitnami/neo4j:latest\\n```\\n\\n## Time series database\\n\\n### InfluxDB\\n\\n```shell\\ndocker pull bitnami/influxdb:latest\\n\\ndocker run -itd \\\\\\n    --name influxdb-dev \\\\\\n    -p 8083:8083 \\\\\\n    -p 8086:8086 \\\\\\n    -e INFLUXDB_HTTP_AUTH_ENABLED=true \\\\\\n    -e INFLUXDB_ADMIN_USER=admin \\\\\\n    -e INFLUXDB_ADMIN_USER_PASSWORD=123456789 \\\\\\n    -e INFLUXDB_ADMIN_USER_TOKEN=admintoken123 \\\\\\n    -e INFLUXDB_DB=my_database \\\\\\n    bitnami/influxdb:latest\\n```\\n\\n```sql\\ncreate user \\"admin\\" with password \'123456789\' with all privileges\\n```\\n\\n:::note\\n\\nManagement tool: `http://localhost:8086/`\\n\\n:::\\n\\n### TimescaleDB\\n\\n```shell\\ndocker pull timescale/timescaledb:latest-pg14\\ndocker pull timescale/timescaledb:latest-pg15\\ndocker pull timescale/timescaledb-postgis:latest-pg13\\ndocker pull timescale/pg_prometheus:latest-pg11\\n\\ndocker run -itd \\\\\\n    --name timescale-dev \\\\\\n    -p 5432:5432 \\\\\\n    -e POSTGRES_PASSWORD=123456 \\\\\\n    timescale/timescaledb:latest-pg15\\n```\\n\\n:::note\\n\\nDefault account: `postgres`\\n\\nDefault password: `123456`\\n\\n:::\\n\\n### OpenTSDB\\n\\n```shell\\ndocker pull petergrace/opentsdb-docker:latest\\n\\ndocker run -itd \\\\\\n    --name opentsdb-dev \\\\\\n    -p 4242:4242 \\\\\\n    petergrace/opentsdb-docker:latest\\n```\\n\\n:::note\\n\\nManagement tool: `http://localhost:4242`\\n\\n:::\\n\\n### QuestDB\\n\\n```shell\\ndocker pull questdb/questdb:latest\\n\\ndocker run -itd \\\\\\n    --name questdb-dev \\\\\\n    -p 9000:9000 \\\\\\n    -p 8812:8812 \\\\\\n    -p 9009:9009 \\\\\\n    questdb/questdb:latest\\n```\\n\\n### TDengine\\n\\n```shell\\ndocker pull tdengine/tdengine:latest\\n\\ndocker run -itd \\\\\\n    --name tdengine-dev \\\\\\n    -p 6030-6041:6030-6041 \\\\\\n    -p 6030-6041:6030-6041/udp \\\\\\n    tdengine/tdengine:latest\\n```\\n\\n### ElasticSearch\\n\\n```shell\\ndocker pull bitnami/elasticsearch:latest\\n\\ndocker run -itd \\\\\\n    --name elasticsearch-dev \\\\\\n    -p 9200:9200 \\\\\\n    -p 9300:9300 \\\\\\n    -e ELASTICSEARCH_USERNAME=elastic \\\\\\n    -e ELASTICSEARCH_PASSWORD=elastic \\\\\\n    -e xpack.security.enabled=true \\\\\\n    -e discovery.type=single-node \\\\\\n    -e http.cors.enabled=true \\\\\\n    -e http.cors.allow-origin=http://localhost:13580,http://127.0.0.1:13580 \\\\\\n    -e http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization \\\\\\n    -e http.cors.allow-credentials=true \\\\\\n    bitnami/elasticsearch:latest\\n\\ndocker pull appbaseio/dejavu:latest\\n\\ndocker run -itd \\\\\\n    --name dejavu-test \\\\\\n    -p 13580:1358 \\\\\\n    appbaseio/dejavu:latest\\n```\\n\\n:::note\\n\\nManagement tool: `http://localhost:13580/`\\n\\n:::\\n\\n### Clickhouse\\n\\n```shell\\ndocker pull yandex/clickhouse-server:latest\\ndocker pull clickhouse/clickhouse-server:latest\\n\\n# 8123 is http interface; 9000 is tcp interface; 9004 is mysql interface\\n# It is recommended to use DBeaver as the client\\ndocker run -itd \\\\\\n    --name clickhouse-server-dev \\\\\\n    -p 8123:8123 \\\\\\n    -p 9000:9000 \\\\\\n    -p 9004:9004 \\\\\\n    --network=app-tier \\\\\\n    --ulimit \\\\\\n    nofile=262144:262144 \\\\\\n    clickhouse/clickhouse-server:latest\\n```\\n\\n:::note\\n\\nDefault account: `default`\\n\\nPassword: none\\n\\n:::\\n\\n### Doris\\n\\n```shell\\ndocker pull apache/doris:1.2.2-be-x86_64\\ndocker pull apache/doris:1.2.2-fe-x86_64\\n\\ndocker network create --driver bridge --subnet=127.0.0.1/24 doris-network\\n\\ndocker run -itd \\\\\\n    --name=doris-fe-dev \\\\\\n    --env FE_SERVERS=\\"fe1:127.0.0.1:9010\\" \\\\\\n    --env FE_ID=1 \\\\\\n    -p 8030:8030 \\\\\\n    -p 9030:9030 \\\\\\n    -v /data/fe/doris-meta:/opt/apache-doris/fe/doris-meta \\\\\\n    -v /data/fe/conf:/opt/apache-doris/fe/conf \\\\\\n    -v /data/fe/log:/opt/apache-doris/fe/log \\\\\\n    --network=doris-network \\\\\\n    --ip=127.0.0.1 \\\\\\n    apache/doris:1.2.2-fe-x86_64\\n\\ndocker run -itd \\\\\\n    --name=doris-be-dev \\\\\\n    --env FE_SERVERS=\\"fe1:127.0.0.1:9010\\" \\\\\\n    --env BE_ADDR=\\"127.0.0.1:9050\\" \\\\\\n    -p 8040:8040 \\\\\\n    -v /data/be/storage:/opt/apache-doris/be/storage \\\\\\n    -v /data/be/conf:/opt/apache-doris/be/conf \\\\\\n    -v /data/be/log:/opt/apache-doris/be/log \\\\\\n    --network=doris-network \\\\\\n    --ip=127.0.0.1 \\\\\\n    apache/doris:1.2.2-be-x86_64\\n```\\n\\n## NoSQL database\\n\\n### MongoDB\\n\\n```shell\\ndocker pull bitnami/mongodb:latest\\ndocker pull bitnami/mongodb-exporter:latest\\n\\ndocker run -itd \\\\\\n    --name mongodb-dev \\\\\\n    -p 27017:27017 \\\\\\n    -e MONGODB_ROOT_USER=root \\\\\\n    -e MONGODB_ROOT_PASSWORD=123456 \\\\\\n    -e MONGODB_USERNAME=test \\\\\\n    -e MONGODB_PASSWORD=123456 \\\\\\n    -e MONGODB_DATABASE=test \\\\\\n    bitnami/mongodb:latest\\n```\\n\\n### Redis\\n\\n```shell\\ndocker pull bitnami/redis:latest\\ndocker pull bitnami/redis-exporter:latest\\n\\ndocker run -itd \\\\\\n    --name redis-server-dev \\\\\\n    -p 6379:6379 \\\\\\n    -e ALLOW_EMPTY_PASSWORD=yes \\\\\\n    bitnami/redis:latest\\n```\\n\\n### Memcached\\n\\n```shell\\ndocker pull bitnami/memcached:latest\\ndocker pull bitnami/memcached-exporter:latest\\n\\ndocker run -itd \\\\\\n    --name memcached-dev \\\\\\n    -p 11211:11211 \\\\\\n    bitnami/memcached:latest\\n```\\n\\n### CouchDB\\n\\n```shell\\ndocker pull bitnami/couchdb:latest\\n\\ndocker run -itd \\\\\\n    --name couchdb-dev \\\\\\n    -p 5984:5984  \\\\\\n    -p 9100:9100  \\\\\\n    -e COUCHDB_PORT_NUMBER=5984\\n    -e COUCHDB_CLUSTER_PORT_NUMBER=9100\\n    -e COUCHDB_USER=admin\\n    -e COUCHDB_PASSWORD=couchdb\\n    bitnami/couchdb:latest\\n```\\n\\n### Cassandra\\n\\n```shell\\ndocker pull bitnami/cassandra:latest\\ndocker pull bitnami/cassandra-exporter:latest\\n\\ndocker run -itd \\\\\\n    --name cassandra-dev \\\\\\n    -p 7000:7000  \\\\\\n    -p 9042:9042  \\\\\\n    -e CASSANDRA_USER=cassandra \\\\\\n    -e CASSANDRA_PASSWORD=cassandra \\\\\\n    bitnami/cassandra:latest\\n```\\n\\n## Service Discovery - Registry\\n\\n### Etcd\\n\\n```shell\\ndocker pull bitnami/etcd:latest\\n\\ndocker run -itd \\\\\\n    --name etcd-standalone-dev \\\\\\n    -p 2379:2379 \\\\\\n    -p 2380:2380 \\\\\\n    -e ETCDCTL_API=3 \\\\\\n    -e ALLOW_NONE_AUTHENTICATION=yes \\\\\\n    -e ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379 \\\\\\n    bitnami/etcd:latest\\n```\\n\\n:::note\\n\\nManagement tool: [etcd-manager](https://www.electronjs.org/apps/etcd-manager)\\n\\n:::\\n\\n### Nacos\\n\\n```shell\\ndocker pull nacos/nacos-server:latest\\n\\ndocker run -itd \\\\\\n    --name nacos-standalone-dev \\\\\\n    -e MODE=standalone \\\\\\n    -p 8849:8848 \\\\\\n    nacos/nacos-server:latest\\n```\\n\\n:::note\\n\\nManagement tool: `http://localhost:8849/nacos/index.html`\\n\\n:::\\n\\n### Consul\\n\\n```shell\\ndocker pull bitnami/consul:latest\\ndocker pull bitnami/consul-exporter:latest\\n\\ndocker run -itd \\\\\\n    --name consul-standalone-dev \\\\\\n    -p 8300:8300 \\\\\\n    -p 8500:8500 \\\\\\n    -p 8600:8600/udp \\\\\\n    -e CONSUL_BIND_INTERFACE=\'eth0\' \\\\\\n    -e CONSUL_AGENT_MODE=server \\\\\\n    -e CONSUL_ENABLE_UI=true \\\\\\n    -e CONSUL_BOOTSTRAP_EXPECT=1 \\\\\\n    -e CONSUL_CLIENT_LAN_ADDRESS=0.0.0.0 \\\\\\n    bitnami/consul:latest\\n```\\n\\n:::note\\n\\nManagement tool: `http://localhost:8500`\\n\\n:::\\n\\n### Apollo\\n\\n```shell\\ndocker pull apolloconfig/apollo-portal:latest\\ndocker pull apolloconfig/apollo-configservice:latest\\ndocker pull apolloconfig/apollo-adminservice:latest\\n\\ndocker run -itd \\\\\\n    --name apollo-configservice-dev \\\\\\n    -p 8080:8080 \\\\\\n    -e SPRING_DATASOURCE_URL=\\"jdbc:mysql://127.0.0.1:3306/ApolloConfigDB?characterEncoding=utf8\\" \\\\\\n    -e SPRING_DATASOURCE_USERNAME=root \\\\\\n    -e SPRING_DATASOURCE_PASSWORD=123456 \\\\\\n    -v /tmp/logs:/opt/logs \\\\\\n    apolloconfig/apollo-configservice:latest\\n\\ndocker run -itd \\\\\\n    --name apollo-adminservice-dev \\\\\\n    -p 8090:8090 \\\\\\n    -e SPRING_DATASOURCE_URL=\\"jdbc:mysql://127.0.0.1:3306/ApolloConfigDB?characterEncoding=utf8\\" \\\\\\n    -e SPRING_DATASOURCE_USERNAME=root \\\\\\n    -e SPRING_DATASOURCE_PASSWORD=123456 \\\\\\n    -v /tmp/logs:/opt/logs \\\\\\n    apolloconfig/apollo-adminservice:latest\\n\\ndocker run -itd \\\\\\n    --name apollo-portal-dev \\\\\\n    -p 8070:8070 \\\\\\n    -e SPRING_DATASOURCE_URL=\\"jdbc:mysql://127.0.0.1:3306/ApolloPortalDB?characterEncoding=utf8\\" \\\\\\n    -e SPRING_DATASOURCE_USERNAME=root \\\\\\n    -e SPRING_DATASOURCE_PASSWORD=123456 \\\\\\n    -e APOLLO_PORTAL_ENVS=dev \\\\\\n    -e DEV_META=http://127.0.0.1:8080 \\\\\\n    -v /tmp/logs:/opt/logs \\\\\\n    apolloconfig/apollo-portal:latest\\n```\\n\\n:::note\\n\\nManagement tool: `http://localhost:8070`\\n\\nAccount / Password: `apollo` / `admin`\\n\\n:::\\n\\n## Message queue\\n\\n### RabbitMQ\\n\\n```shell\\ndocker pull bitnami/rabbitmq:latest\\n\\ndocker run -itd \\\\\\n    --hostname localhost \\\\\\n    --name rabbitmq-dev \\\\\\n    -p 15672:15672 \\\\\\n    -p 5672:5672 \\\\\\n    -p 1883:1883 \\\\\\n    -p 15675:15675 \\\\\\n    -e RABBITMQ_PLUGINS=rabbitmq_top,rabbitmq_mqtt,rabbitmq_web_mqtt,rabbitmq_prometheus,rabbitmq_stomp,rabbitmq_auth_backend_http \\\\\\n    bitnami/rabbitmq:latest\\n\\n# View plugin list\\nrabbitmq-plugins list\\n# rabbitmq_peer_discovery_consul \\nrabbitmq-plugins --offline enable rabbitmq_peer_discovery_consul\\n# rabbitmq_mqtt provides interaction with backend services, port 1883\\nrabbitmq-plugins enable rabbitmq_mqtt\\n# rabbitmq_web_mqtt provides interaction with the front end, port 15675\\nrabbitmq-plugins enable rabbitmq_web_mqtt\\n# rabbitmq_auth_backend_http is enabled and configured to authenticate with RabbitMQ\\nrabbitmq-plugins enable rabbitmq_auth_backend_http\\n```\\n\\n:::note\\n\\nManagement tool: `http://localhost:15672`\\n\\nAccount / Password: `user` / `bitnami`\\n\\n:::\\n\\n### Kafka\\n\\n#### With ZooKeeper\\n\\n```shell\\ndocker pull bitnami/zookeeper:latest\\ndocker pull bitnami/kafka:latest\\ndocker pull bitnami/kafka-exporter:latest\\n\\ndocker run -itd \\\\\\n    --name zookeeper-server-dev \\\\\\n    --network app-tier \\\\\\n    -p 2181:2181 \\\\\\n    -e ALLOW_ANONYMOUS_LOGIN=yes \\\\\\n    bitnami/zookeeper:latest\\n\\ndocker run -itd \\\\\\n    --name kafka-standalone-dev \\\\\\n    --link zookeeper-server-dev \\\\\\n    --network app-tier \\\\\\n    -p 9092:9092 \\\\\\n    -v /home/data/kafka:/bitnami/kafka \\\\\\n    -e KAFKA_ENABLE_KRAFT=no \\\\\\n    -e KAFKA_BROKER_ID=1 \\\\\\n    -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \\\\\\n    -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://host.docker.internal:9092 \\\\\\n    -e KAFKA_ZOOKEEPER_CONNECT=zookeeper-server-dev:2181 \\\\\\n    -e ALLOW_PLAINTEXT_LISTENER=yes \\\\\\n    --user root \\\\\\n    bitnami/kafka:latest\\n```\\n\\n#### With KRaft\\n\\n```shell\\ndocker pull bitnami/kafka:latest\\n\\ndocker run -itd \\\\\\n    --name kafka-standalone-dev \\\\\\n    --user root \\\\\\n    -p 9092:9092 \\\\\\n    -p 9093:9093 \\\\\\n    -v /home/data/kafka:/bitnami/kafka \\\\\\n    -e KAFKA_ENABLE_KRAFT=yes \\\\\\n    -e KAFKA_BROKER_ID=1 \\\\\\n    -e KAFKA_CFG_PROCESS_ROLES=broker,controller \\\\\\n    -e KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER \\\\\\n    -e KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@host.docker.internal:9093 \\\\\\n    -e KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT \\\\\\n    -e KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093 \\\\\\n    -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://host.docker.internal:9092 \\\\\\n    -e ALLOW_PLAINTEXT_LISTENER=yes \\\\\\n    bitnami/kafka:latest\\n```\\n\\n:::note\\n\\nManagement tool: [Offset Explorer](https://www.kafkatool.com/download.html)\\n\\n:::\\n\\n### NSQ\\n\\n```shell\\ndocker pull nsqio/nsq:latest\\n\\n# nsqlookupd\\ndocker run -d \\\\\\n    --name nsqlookupd \\\\\\n    -p 4160:4160 \\\\\\n    -p 4161:4161 \\\\\\n    nsqio/nsq:latest \\\\\\n    /nsqlookupd\\n\\n# nsqd\\ndocker run -itd \\\\\\n    --name nsqd \\\\\\n    -p 4150:4150 \\\\\\n    -p 4151:4151 \\\\\\n    --link nsqlookupd \\\\\\n    nsqio/nsq:latest \\\\\\n    /nsqd --lookupd-tcp-address=nsqlookupd:4160\\n\\n#nsqadmin\\ndocker run -itd \\\\\\n    --name nsqadmin \\\\\\n    -p 4171:4171 \\\\\\n    --link nsqlookupd \\\\\\n    nsqio/nsq:latest \\\\\\n    /nsqadmin --lookupd-http-address=nsqlookupd:4161\\n```\\n\\n:::note\\n\\nConsole access address: `http://127.0.0.1:4171`\\n\\nDirectly use the REST API to view node information: `http://127.0.0.1:4161/nodes`\\n\\n:::\\n\\n### NATS\\n\\n```shell\\ndocker pull bitnami/nats:latest\\ndocker pull bitnami/nats-exporter:latest\\n\\ndocker run -itd \\\\\\n    --name nats-server \\\\\\n    --p 4222:4222 \\\\\\n    --p 6222:6222 \\\\\\n    --p 8000:8222 \\\\\\n    -e NATS_HTTP_PORT_NUMBER=8222 \\\\\\n    bitnami/nats:latest\\n```\\n\\n:::note\\n\\nManagement tool: `https://127.0.0.1:8000`\\n\\n:::\\n\\n### Mosquitto\\n\\n```shell\\ndocker pull eclipse-mosquitto:latest\\n\\n# 1883 tcp\\n# 9001 websockets\\ndocker run -itd \\\\\\n    --name mosquitto-dev \\\\\\n    -p 1883:1883 \\\\\\n    -p 9001:9001 \\\\\\n    eclipse-mosquitto:latest\\n```\\n\\n### EMX\\n\\n```shell\\ndocker pull emqx/emqx:latest\\n\\ndocker run -itd \\\\\\n    --name emqx-dev \\\\\\n    --add-host=host.docker.internal:host-gateway \\\\\\n    -p 18083:18083 \\\\\\n    -p 1883:1883 \\\\\\n    emqx/emqx:latest\\n```\\n\\n:::note\\n\\nManagement tool: `http://localhost:18083`\\n\\nAccount / Password: `admin` / `public`\\n\\n:::\\n\\n### Pulsar\\n\\n```shell\\ndocker pull apachepulsar/pulsar-manager:latest\\ndocker pull apachepulsar/pulsar:latest\\n\\ndocker run -itd \\\\\\n    -p 6650:6650 \\\\\\n    -p 8080:8080 \\\\\\n    --name pulsar-standalone \\\\\\n    apachepulsar/pulsar:latest bin/pulsar standalone\\n\\ndocker run -itd \\\\\\n    -p 9527:9527 \\\\\\n    -p 7750:7750 \\\\\\n    -e SPRING_CONFIGURATION_FILE=/pulsar-manager/pulsar-manager/application.properties \\\\\\n    apachepulsar/pulsar-manager:latest\\n```\\n\\n```shell\\ndocker pull apachepulsar/pulsar-standalone:latest\\n\\ndocker run -itd \\\\\\n    -p 6650:6650 \\\\\\n    -p 8080:8080 \\\\\\n    -p 9527:9527 \\\\\\n    --name pulsar-standalone \\\\\\n    apachepulsar/pulsar:latest bin/pulsar standalone\\n```\\n\\n:::note\\n\\nManagement tool: `http://localhost:9527`\\n\\n:::\\n\\n### HiveMQ\\n\\n```shell\\ndocker pull hivemq/hivemq4:latest\\n\\ndocker run -itd \\\\\\n    --name hivemq-dev \\\\\\n    --ulimit nofile=500000:500000 \\\\\\n    -p 8080:8080 \\\\\\n    -p 8000:8000 \\\\\\n    -p 1883:1883 \\\\\\n    hivemq/hivemq4:latest\\n```\\n\\n### RocketMQ\\n\\nAt least one NameServer and one Broker must be started.\\n\\n```shell\\ndocker pull apache/rocketmq:latest\\n\\n# NameServer\\ndocker run -d \\\\\\n      --name rmqnamesrv \\\\\\n      -e \\"JAVA_OPT_EXT=-Xms512M -Xmx512M -Xmn128m\\" \\\\\\n      -p 9876:9876 \\\\\\n      apache/rocketmq:latest \\\\\\n      sh mqnamesrv\\n\\n# Broker\\ndocker run -d \\\\\\n      --name rmqbroker \\\\\\n      -e \\"JAVA_OPT_EXT=-Xms512M -Xmx512M -Xmn128m\\" \\\\\\n      -p 10911:10911 -p 10909:10909 \\\\\\n      --link rmqnamesrv \\\\\\n      -e \\"NAMESRV_ADDR=rmqnamesrv:9876\\" \\\\\\n      apache/rocketmq:latest \\\\\\n      sh mqbroker\\n```\\n\\n```shell\\ndocker pull styletang/rocketmq-console-ng:latest\\n\\ndocker run -d \\\\\\n    --name rmqconsole \\\\\\n    -p 9800:8080 \\\\\\n    --link rmqnamesrv \\\\\\n    -e \\"JAVA_OPTS=-Drocketmq.namesrv.addr=rmqnamesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false\\" \\\\\\n    -t styletang/rocketmq-console-ng:latest\\n```\\n\\n:::note\\n\\nConsole access address: `http://localhost:9800/#/`\\n\\n:::\\n\\n### ActiveMQ\\n\\n```shell\\ndocker pull rmohr/activemq:latest\\n\\ndocker run -d \\\\\\n      --name activemq-dev \\\\\\n      -p 61616:61616 \\\\\\n      -p 8161:8161 \\\\\\n      -p 61613:61613 \\\\\\n      -p 1883:1883 \\\\\\n      -p 61614:61614 \\\\\\n      rmohr/activemq:latest\\n```\\n\\n| Port number | Protocol |\\n|-------------|----------|\\n| 61616       | JMS      |\\n| 8161        | UI       |\\n| 5672        | AMQP     |\\n| 61613       | STOMP    |\\n| 1883        | MQTT     |\\n| 61614       | WS       |\\n\\n:::note\\n\\nAdmin tool: `http://localhost:8161/admin/`\\n\\nAccount / Password: `admin` / `admin`\\n\\n:::\\n\\n### Asynq\\n\\n```shell\\ndocker pull hibiken/asynqmon:latest\\n\\ndocker run -d \\\\\\n    --name asynq-dev \\\\\\n    -p 8080:8080 \\\\\\n    hibiken/asynqmon:latest --redis-addr=host.docker.internal:6379\\n```\\n\\n:::note\\n\\nManagement tool: `http://localhost:8080`\\n\\n:::\\n\\n## Microservice runtime\\n\\n### Tracing\\n\\n```shell\\ndocker pull jaegertracing/all-in-one:latest\\n\\ndocker run -itd \\\\\\n    --name jaeger-dev \\\\\\n    -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \\\\\\n    -e COLLECTOR_OTLP_ENABLED=true \\\\\\n    -p 6831:6831/udp \\\\\\n    -p 6832:6832/udp \\\\\\n    -p 5778:5778 \\\\\\n    -p 16686:16686 \\\\\\n    -p 4317:4317 \\\\\\n    -p 4318:4318 \\\\\\n    -p 14250:14250 \\\\\\n    -p 14268:14268 \\\\\\n    -p 14269:14269 \\\\\\n    -p 9411:9411 \\\\\\n    jaegertracing/all-in-one:latest\\n```\\n\\n\\n| Port number | Protocol | Components | Function                                                    |\\n|-------------|----------|------------|-------------------------------------------------------------|\\n| 6831        | UDP      | agent      | Thrift-compact protocol (used by most SDKs)                 |\\n| 6832        | UDP      | agent      | Thrift-binary protocol (used by Node.js SDK)                |\\n| 5775        | UDP      | agent      | Thrift-compact protocol (deprecated)                        |\\n| 5778        | HTTP     | agent      | Service configuration interface (sampling, etc.)            |\\n| 16686       | HTTP     | Query      | Service front end for Jaeger Web UI                         |\\n| 4317        | HTTP     | Collector  | If enabled, receive OpenTelemetry Protocol (OTLP) over gRPC |\\n| 4318        | HTTP     | Collector  | If enabled, receive OpenTelemetry Protocol (OTLP) over HTTP |\\n| 14268       | HTTP     | Collector  | Receive clients directly                                    |\\n| 14269       | HTTP     | Collector  | Provides: health check `/`, performance check `/metrics`    |\\n| 14250       | HTTP     | Collector  | Take over `model.proto`                                     |\\n| 9411        | HTTP     | Collector  | Zipkin-compatible http endpoint (optional)                  |\\n\\n:::note\\n\\nAPI: `http://localhost:14268/api/traces`\\n\\nManagement tool: `http://localhost:16686`\\n\\n:::\\n\\n### Zipkin\\n\\n```shell\\ndocker pull openzipkin/zipkin:latest\\n\\ndocker run -d \\\\\\n    --name zipkin-dev \\\\\\n    -p 9411:9411 \\\\\\n    openzipkin/zipkin:latest\\n```\\n\\n:::note\\n\\nAPI: `http://localhost:9411/api/v2/spans`\\n\\nManagement tool: `http://localhost:9411`\\n\\n:::\\n\\n## Operation and maintenance monitoring\\n\\n### Kibana\\n\\n```shell\\ndocker pull bitnami/kibana:latest\\n\\ndocker run -d \\\\\\n    --name kibana-dev \\\\\\n    -p 5601:5601 \\\\\\n    -e KIBANA_ELASTICSEARCH_URL=elasticsearch \\\\\\n    -e KIBANA_ELASTICSEARCH_PORT_NUMBER=9200 \\\\\\n    bitnami/kibana:latest\\n```\\n\\n### Prometheus\\n\\n```shell\\ndocker pull bitnami/prometheus:latest\\ndocker pull bitnami/pushgateway:latest\\n\\ndocker run -d \\\\\\n    --name prometheus-gateway \\\\\\n    -p 9091:9091 \\\\\\n    bitnami/pushgateway:latest\\n\\ndocker run -d \\\\\\n    --name prometheus \\\\\\n    -p 9090:9090 \\\\\\n    bitnami/prometheus:latest\\n```\\n\\n:::note\\n\\nPrometheus tool: `http://localhost:9090`\\n\\nPush gateway tool: `http://localhost:9091`\\n\\n:::\\n\\n### Grafana\\n\\n```shell\\ndocker pull bitnami/grafana:latest\\n\\ndocker run -d \\\\\\n    --name grafana \\\\\\n    -p 3000:3000 \\\\\\n    -e GF_SECURITY_ADMIN_PASSWORD=pass \\\\\\n    bitnami/grafana:latest\\n```\\n\\n### Logstash\\n\\n```shell\\ndocker pull bitnami/logstash:latest\\ndocker pull bitnami/logstash-exporter:latest\\n\\ndocker run -d \\\\\\n    --name logstash \\\\\\n    -p 8080:8080 \\\\\\n    bitnami/logstash:latest\\n```\\n\\n### Fluentd\\n\\n```shell\\ndocker pull bitnami/fluentd:latest\\n\\ndocker run -d \\\\\\n    --name fluentd \\\\\\n    -p 24224:24224 \\\\\\n    -p 24224:24224/udp \\\\\\n    -v /data:/opt/bitnami/fluentd/log \\\\\\n    bitnami/fluentd:latest\\n```\\n\\n## Streaming computing\\n\\n### Spark\\n\\n```shell\\ndocker pull bitnami/spark:latest\\n\\ndocker run -itd \\\\\\n    --name spark-standalone \\\\\\n    -p 6066:6066 \\\\\\n    -p 7077:7077 \\\\\\n    -p 8080:8080 \\\\\\n    -p 50070:50070 \\\\\\n    -e SPARK_MODE=master \\\\\\n    -e SPARK_WORKER_CORES=1 \\\\\\n    -e SPARK_WORKER_MEMORY=2g \\\\\\n    bitnami/spark:latest\\n```\\n\\n:::note\\n\\nHDFS web interface: `http://localhost:50070`\\n\\nSpark interface: `http://localhost:8080`\\n\\n:::\\n\\n### Flink\\n\\n```shell\\ndocker pull flink:latest\\n\\ndocker network create flink-network\\n\\ndocker run -itd \\\\\\n    --name flink-jobmanager \\\\\\n    --network flink-network \\\\\\n    -p 8081:8081 \\\\\\n    --env FLINK_PROPERTIES=\\"jobmanager.rpc.address: flink-jobmanager\\" \\\\\\n    flink:latest jobmanager\\n\\ndocker run -itd \\\\\\n    --name flink-taskmanager \\\\\\n    --network flink-network \\\\\\n    --env FLINK_PROPERTIES=\\"jobmanager.rpc.address: flink-jobmanager\\" \\\\\\n    flink:latest taskmanager\\n```\\n\\n:::note\\n\\nManagement tool: `http://localhost:8081`\\n\\n:::\\n\\n## Object storage\\n\\n### MinIO\\n\\n```shell\\ndocker pull bitnami/minio:latest\\n\\ndocker network create app-tier --driver bridge\\n\\n# MINIO_ROOT_USER minimum 3 characters\\n# MINIO_ROOT_PASSWORD minimum 8 characters\\n# When running for the first time, the service will automatically shut down, and it can run normally after restarting manually.\\ndocker run -itd \\\\\\n    --name minio-server \\\\\\n    -p 9000:9000 \\\\\\n    -p 9001:9001 \\\\\\n    --env MINIO_ROOT_USER=\\"root\\" \\\\\\n    --env MINIO_ROOT_PASSWORD=\\"123456789\\" \\\\\\n    --env MINIO_DEFAULT_BUCKETS=\'images,videos\' \\\\\\n    --env MINIO_FORCE_NEW_KEYS=\\"yes\\" \\\\\\n    --env BITNAMI_DEBUG=true \\\\\\n    --volume /usr/local/minio/data:/data \\\\\\n    --network app-tier \\\\\\n    bitnami/minio:latest\\n```\\n\\n```shell\\ndocker pull minio/minio:latest\\n\\n# MINIO_ROOT_USER minimum 3 characters, default: minioadmin\\n# MINIO_ROOT_PASSWORD minimum 8 characters, default: minioadmin\\ndocker run -itd \\\\\\n    --name minio-server \\\\\\n    -p 9000:9000 \\\\\\n    -p 9001:9001 \\\\\\n    -e \\"MINIO_ROOT_USER=root\\" \\\\\\n    -e \\"MINIO_ROOT_PASSWORD=123456789\\" \\\\\\n    -v /usr/local/minio/data:/data \\\\\\n    --network app-tier \\\\\\n    minio/minio server /data --console-address \':9001\'\\n```\\n\\n:::note\\n\\nManagement tool: `http://localhost:9001/login`\\n\\n:::\\n\\n## Machine learning\\n\\n### TensorFlow\\n\\n```shell\\ndocker pull bitnami/tensorflow-resnet:latest\\ndocker pull bitnami/tensorflow-serving:latest\\ndocker pull bitnami/tensorflow-inception:latest\\n\\ndocker network create app-tier --driver bridge\\n\\ndocker run -d --name tensorflow-serving \\\\\\n    --volume /tmp/model-data:/bitnami/model-data \\\\\\n    --network app-tier \\\\\\n    bitnami/tensorflow-serving:latest\\n\\ndocker run -d --name tensorflow-resnet \\\\\\n    --volume /tmp/model-data:/bitnami/model-data \\\\\\n    --network app-tier \\\\\\n    bitnami/tensorflow-resnet:latest\\n```\\n\\n## References\\n\\n- [https://db-engines.com/en/ranking/time+series+dbms](https://db-engines.com/en/ranking/time+series+dbms)"},{"id":"/2023/09/06/go-micro-easily-connects-to-efk-log-system","metadata":{"permalink":"/2023/09/06/go-micro-easily-connects-to-efk-log-system","source":"@site/blog/2023-09-06-go-micro-easily-connects-to-efk-log-system.md","title":"Go-Micro easily connects to the EFK log system","description":"Golang microservice framework (Go-Micro) easily connects to the EFK log system","date":"2023-09-06T00:00:00.000Z","formattedDate":"September 6, 2023","tags":[{"label":"go","permalink":"/tags/go"},{"label":"golang","permalink":"/tags/golang"},{"label":"microservice","permalink":"/tags/microservice"},{"label":"go-micro","permalink":"/tags/go-micro"},{"label":"log","permalink":"/tags/log"},{"label":"elasticsearch","permalink":"/tags/elasticsearch"},{"label":"fluentd","permalink":"/tags/fluentd"},{"label":"kibana","permalink":"/tags/kibana"}],"readingTime":5.55,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Go-Micro easily connects to the EFK log system","description":"Golang microservice framework (Go-Micro) easily connects to the EFK log system","tags":["go","golang","microservice","go-micro","log","elasticsearch","fluentd","kibana"],"hide_table_of_contents":false},"prevItem":{"title":"Locally deploy Docker development environment","permalink":"/2023/09/09/locally-deploy-docker-development-environment"},"nextItem":{"title":"Golang microservice framework (Go-Micro) implements SSE service","permalink":"/2023/08/24/go-micro-implements-sse-service"}},"content":"\x3c!--truncate--\x3e\\n\\n## Overview\\n\\nIn the early era of single services, if we wanted to use logs to locate business logic bugs or performance issues in the production environment, we have to operation and maintenance personnel log in to the server remotely one by one and query the log files for each service instance to troubleshoot the problem.\\n\\nIn the era of microservices, service instances are deployed on different physical machines, and the logs of each microservice are also scattered and stored on different machines.\\nWhen the service cluster is large enough, hundreds, thousands, or even tens of thousands, it is already an impossible task to use the above traditional method to check the log.\\nTherefore, we need to centralize the management of logs in the distributed system.\\n\\nLog collection is an integral part of microservice observability. \\nLogs are useful for debugging problems and monitoring cluster health.\\nHowever, after collecting log files centrally, is still not all right. We have a series of problems to solve like: \\n- How to query and analyze log files.\\n- Which services have alarms and exceptions also require detailed statistics.\\n\\nTherefore, when online failures occurred in the past, it was often seen that development, operation, and maintenance personnel downloaded service logs, and retrieved, and counted them based on some commands under Linux (such as `grep`, `awk`, and `wc`, etc.)\\nThis old method not only has a heavy workload, and is inefficient, but also cannot handle more demanding operations such as query, sorting, and statistics, as well as a large number of cluster machines.\\n\\nEFK (Elasticsearch, Fluentd, Kibana) is a popular distributed log service solution in current microservices.\\nBelow, I will explain step by step how EFK is applied to the Golang microservice framework (Go-Micro).\\n\\n## EFK - Distributed Log System\\n\\nEFK is a complete-distributed log collection system, which well solves the above-mentioned problems of difficulty in log collection, retrieval, and analysis.\\n- `Elasticsearch` is a distributed search engine. \\nIt has the characteristics of high scalability, high reliability, and easy management. \\nIt can be used for full-text search, structured search, and analysis, and can combine the three.\\nElasticsearch is developed based on **Lucene** and is now one of the most widely used open-source search engines.\\nWikipedia, StackOverflow, Github, etc. all build their own search engines based on it.\\n- `Fluentd` is an open-source data collector.\\nWe can install Fluentd on the microservice cluster node to obtain container log files, filter and transform the log data and then pass the data to the Elasticsearch cluster, where it will be indexed and stored.\\nFluentd\'s logs must be in JSON as the carrier, and there is no limit to the log content.\\n- `Kibana` is a visualization platform. \\nKibana is a web page used to search, analyze, and visualize log data stored in Elasticsearch metrics. \\nKibana leverages Elasticsearch\'s interface to retrieve data, call data stored in Elasticsearch, and visualize it.\\nIt not only allows users to customize views, but also supports querying and filtering data in special ways.\\n\\nIf we regard this series of components as an MVC model, then it is:\\n- `Fluentd` corresponds to the logic control (**Controller layer**)\\n- `Elasticsearch` is a data model (**Model layer**)\\n- `Kibana` is a view (**View layer**)\\n\\n## Deploy EFK\\n\\nWe use Docker to deploy EFK.\\nFirst, let\'s write a Docker-Compose configuration file:\\n\\n```yaml\\nversion: \'3\'\\n\\nnetworks:\\n  go-micro-efk:\\n    driver: bridge\\n\\nservices:\\n  elasticsearch:\\n    image: docker.io/bitnami/elasticsearch:latest\\n    networks:\\n      - go-micro-efk\\n    ports:\\n      - \\"9200:9200\\"\\n      - \\"9300:9300\\"\\n    environment:\\n      - ELASTICSEARCH_USERNAME=elastic\\n      - ELASTICSEARCH_PASSWORD=elastic\\n      - xpack.security.enabled=true\\n      - discovery.type=single-node\\n      - http.cors.enabled=true\\n      - http.cors.allow-origin=http://localhost:13580,http://127.0.0.1:13580\\n      - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization\\n      - http.cors.allow-credentials=true\\n\\n  fluentd:\\n    image: docker.io/bitnami/fluentd:latest\\n    networks:\\n      - go-micro-efk\\n    depends_on:\\n      - \\"elasticsearch\\"\\n    volumes:\\n      - ./fluentd/conf:/opt/bitnami/fluentd/conf\\n      - ./fluentd/log:/opt/bitnami/fluentd/log\\n    ports:\\n      - \\"24224:24224\\"\\n      - \\"24224:24224/udp\\"\\n\\n  kibana:\\n    image: docker.io/bitnami/kibana:latest\\n    networks:\\n      - go-micro-efk\\n    depends_on:\\n      - \\"elasticsearch\\"\\n    ports:\\n      - \\"5601:5601\\"\\n    environment:\\n      - KIBANA_ELASTICSEARCH_URL=elasticsearch\\n      - KIBANA_ELASTICSEARCH_PORT_NUMBER=9200\\n```\\n\\nThen, we use the following command to create a Docker container and run it in the background:\\n\\n```shell\\ndocker-compose up -d\\n```\\n\\nThis is not the end, we still need to modify the configuration of Fluentd.\\nIn the original configuration, the log is only recorded in the local text file of Fluentd.\\nSo we need to modify the configuration to enable logging to Elasticsearch.\\n\\nThe original configuration file looks like this:\\n\\n```xml\\n<source>\\n  @type  forward\\n  @id    input1\\n  @label @mainstream\\n  port  24224\\n</source>\\n\\n<filter **>\\n  @type stdout\\n</filter>\\n\\n<label @mainstream>\\n  <match docker.**>\\n    @type file\\n    @id             output_docker1\\n    path            /opt/bitnami/fluentd/logs/docker.*.log\\n    symlink_path    /opt/bitnami/fluentd/logs/docker.log\\n    append          true\\n    time_slice_format %Y%m%d\\n    time_slice_wait   1m\\n    time_format       %Y%m%dT%H%M%S%z\\n  </match>\\n  <match **>\\n    @type file\\n    @id   output1\\n    path            /opt/bitnami/fluentd/logs/data.*.log\\n    symlink_path    /opt/bitnami/fluentd/logs/data.log\\n    append          true\\n    time_slice_format %Y%m%d\\n    time_slice_wait   10m\\n    time_format       %Y%m%dT%H%M%S%z\\n  </match>\\n</label>\\n\\n# Include config files in the ./config.d directory\\n@include config.d/*.conf\\n```\\n\\nWe need to modify the `<match **>` node to the following configuration:\\n\\n```xml\\n<match **>\\n    @type elasticsearch\\n    host host.docker.internal\\n    port 9200\\n    index_name go-micro-fluentd\\n    type_name log\\n</match>\\n```\\n\\nThe above configuration actually uses the `fluent-plugin-elasticsearch` plug-in to import logs into Elasticsearch.\\n\\n## Go-Micro interface with EFK\\n\\nFirst, we need to download a package of Fluent:\\n\\n```shell\\ngo get github.com/devexps/go-micro/log/fluent/v2\\n```\\n\\nThen create the logger:\\n\\n```go\\nimport (\\n    fluentLogger \\"github.com/devexps/go-micro/log/fluent/v2\\"\\n)\\n\\n// NewFluentLogger creates a new logger - Fluent\\nfunc NewFluentLogger(endpoint string) log.Logger {\\n    wrapped, err := fluentLogger.NewLogger(endpoint)\\n    if err != nil {\\n        panic(\\"create fluent logger failed\\")\\n        return nil\\n    }\\n    return wrapped\\n}\\n```\\n\\nNow, all Go-Micro logs are injected into the EFK.\\n\\n## Kibana query log\\n\\nKibana\'s access port is 5601, so we can access: http://127.0.0.1:5601/\\n\\nWhen we first entered Kibana, it was blank and nothing. \\n\\n<p align=\\"center\\">\\n<img src=\\"/assets/thoughts/go-micro/connect-to-efk-log-system/screenshot-001.png\\" width=\\"100%\\" alt=\\"go-micro-connects-to-the-efk-log-system-screenshot-001\\" />\\n</p>\\n\\nThen, we need to add a `Data View`, which is equivalent to creating a log query view.\\nWe click `Discover` -> `Create a data view`. After that, we will see the following interface:\\n\\n<p align=\\"center\\">\\n<img src=\\"/assets/thoughts/go-micro/connect-to-efk-log-system/screenshot-002.png\\" width=\\"100%\\" alt=\\"go-micro-connects-to-the-efk-log-system-screenshot-002\\" />\\n</p>\\n\\nAbove, we set the elastic search index in fluent to: `go-micro-fluentd`, so now we fill in `go-micro-fluentd` in the `Index pattern` text box.\\nWith the `Timestamp field`, we can find `ts` from the drop-down box and select it.\\nThen, we can click `Save data view to Kibana` to create the view.\\n\\nWe will see a view of the log query:\\n\\n<p align=\\"center\\">\\n<img src=\\"/assets/thoughts/go-micro/connect-to-efk-log-system/screenshot-003.png\\" width=\\"100%\\" alt=\\"go-micro-connects-to-the-efk-log-system-screenshot-003\\" />\\n</p>\\n\\nIn this view, what we see is only the most original log information. \\nWe can check `msg` or other fields that need attention on the left, and Kibana will filter out the information we care about:\\n\\n<p align=\\"center\\">\\n<img src=\\"/assets/thoughts/go-micro/connect-to-efk-log-system/screenshot-004.png\\" width=\\"100%\\" alt=\\"go-micro-connects-to-the-efk-log-system-screenshot-004\\" />\\n</p>\\n\\nIf you need to build a more complex query, you can build a query statement in the top search bar.\\n\\nCode repository: [https://github.com/devexps/go-efk](https://github.com/devexps/go-efk)\\n\\n## References\\n\\n- [Improve your logging process](https://x-team.com/blog/improve-your-logging-process/)\\n- [Fluentd vs Logstash: A Comparison of Log Collectors](https://logz.io/blog/fluentd-Logstash/)\\n- [How to setup the LFK logging stack on Kubernetes](https://www.digitalocean.com/community/tutorials/how-to-set-up-an-elasticsearch-fluentd-and-kibana-efk-logging-stack-on-kubernetes)"},{"id":"/2023/08/24/go-micro-implements-sse-service","metadata":{"permalink":"/2023/08/24/go-micro-implements-sse-service","source":"@site/blog/2023-08-24-go-micro-implements-sse-service.md","title":"Golang microservice framework (Go-Micro) implements SSE service","description":"Golang microservice framework (Go-Micro) implements SSE service","date":"2023-08-24T00:00:00.000Z","formattedDate":"August 24, 2023","tags":[{"label":"go","permalink":"/tags/go"},{"label":"golang","permalink":"/tags/golang"},{"label":"microservice","permalink":"/tags/microservice"},{"label":"go-micro","permalink":"/tags/go-micro"},{"label":"sse","permalink":"/tags/sse"}],"readingTime":5.555,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Golang microservice framework (Go-Micro) implements SSE service","description":"Golang microservice framework (Go-Micro) implements SSE service","tags":["go","golang","microservice","go-micro","sse"],"hide_table_of_contents":false},"prevItem":{"title":"Go-Micro easily connects to the EFK log system","permalink":"/2023/09/06/go-micro-easily-connects-to-efk-log-system"},"nextItem":{"title":"The interface and inheritance of Golang","permalink":"/2023/05/25/the-interface-and-inheritance-of-golang"}},"content":"\x3c!--truncate--\x3e\\n\\n## Overview\\n\\nI also only recently learned about SSE.\\nI asked people around me and found that there are not many people who know it.\\n\\n**How did I know about SSE?**\\nI looked at OpenAI\'s API and there is a Stream mode, which is implemented using SSE.\\nTo put it bluntly, this is an HTTP long connection protocol that continuously sends data to the front end through the\\nserver.\\nIn the case of unstable network, it is better than WebSocket.\\n\\n## What is SSE?\\n\\nServer-Sent Events (SSE for short)\\n\\nThe truth is, the HTTP protocol cannot enable the server to actively push information.\\nHowever, there is a workaround where the server declares to the client that the next thing to send is streaming.\\n\\nThat means, what is sent is not a one-time data packet, but a data stream which will be sent continuously.\\nAt this time, the client will not close the connection, but will always wait for the new data stream sent by the server.\\nAnd you can see from the Video Playback is an example of this.\\nEssentially, this kind of communication is to complete a long download in the form of streaming information.\\n\\nSSE is similar to WebSocket, in that it establishes a communication channel between the browser and the client, and then\\nthe server pushes information to the browser.\\n\\nOverall, WebSocket is more powerful and flexible. Because it is a full-duplex channel, it can communicate in two\\ndirections.\\nSSE is a one-way channel, which can only be sent from the server to the browser because streaming information is\\nessentially downloading.\\nIf the browser sends information to the server, it becomes another HTTP request.\\n\\nHowever, SSE also has its own advantages:\\n\\n* SSE uses the HTTP protocol, which is supported by existing server software. *WebSocket is a separate protocol.*\\n* SSE is lightweight and easy to use, *but the WebSocket protocol is relatively complex.*\\n* SSE supports disconnection, and reconnection by default. *And WebSocket needs to implement it by itself.*\\n* SSE is only used to transmit text and binary data, and it needs to be encoded before transmission. *WebSocket supports\\n  the transmission of binary data by default.*\\n* SSE also supports customizing the message types sent.\\n\\nTherefore, both have their own characteristics and are suitable for different occasions.\\n\\n## Protocol description\\n\\n### Data format\\n\\nThe SSE data sent by the server to the browser must be UTF-8 encoded text with the following HTTP header information.\\n\\n```text\\nContent-Type: text/event-stream\\nCache-Control: no-cache\\nConnection: keep-alive\\n```\\n\\nAmong the above three lines, the `Content-Type` of the first line must specify the MIME type as `event-stream`.\\n\\nThe information sent each time is composed of several messages, and each `message` is separated by `\\\\n\\\\n`.\\nEach message is composed of several lines, and each line is in the following format:\\n\\n```text\\n[field]: value\\\\n\\n```\\n\\nThe above `field` can take four values: **data**, **id**, **event**, **retry**\\n\\nIn addition, there can be lines beginning with a colon, indicating comments. Normally, the server will send a note to\\nthe browser every so often, keeping the connection uninterrupted.\\n\\n```text\\n: This is a comment\\\\n\\\\n\\n```\\n\\nBelow is an example:\\n\\n```text\\n: This is a demo stream\\\\n\\\\n\\n\\ndata: some demo text\\\\n\\\\n\\n\\ndata: another demo message\\\\n\\ndata: with two lines \\\\n\\\\n\\n```\\n\\n### Data field\\n\\nThe data content is represented by the `data` field.\\nIf the data is too long, it can be divided into multiple lines.\\nThe last line ends with `\\\\n\\\\n`, and the previous lines end with `\\\\n`.\\n\\n```text\\ndata:  demo message\\\\n\\\\n\\n\\ndata: begin demo message\\\\n\\ndata: continue demo message\\\\n\\ndata: end demo message\\\\n\\\\n\\n```\\n\\nHere is an example of sending JSON data:\\n\\n```text\\ndata: {\\\\n\\ndata: \\"foo\\": \\"bar\\",\\\\n\\ndata: \\"baz\\", 555\\\\n\\ndata: }\\\\n\\\\n\\n```\\n\\n### ID field\\n\\nThe data identifier is represented by the `id` field, which is equivalent to the serial number of each piece of data.\\n\\n```text\\nid: msg1\\\\n\\ndata: demo message\\\\n\\\\n\\n```\\n\\nThe browser reads this value and stores it with the `lastEventId` property.\\nOnce the connection is disconnected, the browser will send an HTTP header containing a special `Last-Event-ID` header\\ninformation, and send this value back to help the server re-establish the connection.\\nTherefore, this header can be viewed as a synchronization mechanism.\\n\\n### Event field\\n\\nThe `event` field indicates a custom event type, and the default is a `message` event. The browser can listen to this\\nevent with `addEventListener()`.\\n\\n```text\\nevent: foo\\\\n\\ndata: a foo event\\\\n\\\\n\\n\\ndata: an unnamed event or a message event\\\\n\\\\n\\n\\nevent: bar\\\\n\\ndata: a bar event\\\\n\\\\n\\n```\\n\\nThe above code creates three messages. The name of the first item is `foo`, which triggers the browser\'s `foo event`.\\nThe second item is unnamed, indicating the default type, and triggers the browser\'s `message event`.\\nThe third item is `bar`, which triggers the browser\'s `bar event`.\\n\\nHere\'s other examples:\\n\\n```text\\nevent: userconnect\\ndata: {\\"username\\": \\"Tom\\", \\"time\\": \\"02:33:48\\"}\\n\\nevent: usermessage\\ndata: {\\"username\\": \\"Tom\\", \\"time\\": \\"02:34:11\\", \\"text\\": \\"Hi everyone.\\"}\\n\\nevent: userdisconnect\\ndata: {\\"username\\": \\"Tom\\", \\"time\\": \\"02:34:23\\"}\\n\\nevent: usermessage\\ndata: {\\"username\\": \\"Jerry\\", \\"time\\": \\"02:34:36\\", \\"text\\": \\"Bye, Tom.\\"}\\n```\\n\\n### Retry field\\n\\nThe server can use this `retry` field to specify the time interval for the browser to re-initiate the connection.\\n\\n```text\\nretry: 10000\\\\n\\n```\\n\\nTwo situations will cause the browser to re-initiate the connection:\\n\\n- One is that the time interval expires.\\n- The other is a connection error due to network error and other reasons.\\n\\n## Go-Micro server\\n\\nFirstly install the library:\\n\\n```bash\\ngo get -u github.com/devexps/go-micro/transport/sse/v2\\n```\\n\\nThen implement a simple server:\\n\\n```go\\npackage main\\n\\nimport (\\n  \\"context\\"\\n  \\"os\\"\\n  \\"os/signal\\"\\n  \\"syscall\\"\\n\\n  \\"github.com/devexps/go-micro/transport/sse/v2\\"\\n)\\n\\nfunc main() {\\n  interrupt := make(chan os.Signal, 1)\\n  signal.Notify(interrupt, syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT)\\n\\n  ctx := context.Background()\\n\\n  s := sse.NewServer(\\n    sse.WithAddress(\\":8080\\"),\\n  )\\n  defer s.Stop(ctx)\\n\\n  s.HandleServeHTTP(\\"/events\\")\\n\\n  s.CreateStream(\\"demo\\")\\n\\n  go func() {\\n    s.Start(ctx)\\n  }()\\n\\n  s.Publish(\\"demo\\", &sse.Event{Data: []byte(\\"message\\")})\\n\\n  <-interrupt\\n}\\n```\\n\\n## Javascript client\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n<head>\\n    <title>SSE Client</title>\\n    <meta charset=\'utf-8\'>\\n    <meta http-equiv=\'X-UA-Compatible\' content=\'IE=edge\'>\\n    <meta name=\'viewport\' content=\'width=device-width, initial-scale=1\'>\\n</head>\\n<body>\\n<div>\\n    <ul id=\\"messages\\">\\n    </ul>\\n</div>\\n\\n<script>\\n    if (window.EventSource == null) {\\n        alert(\'The browser does not support Server-Sent Events\');\\n    }\\n\\n    const eventSource = new EventSource(\\"http://localhost:8080/events?stream=demo\\")\\n\\n    // Fired when the event source connection fails to open.\\n    eventSource.onerror = function (error) {\\n        console.log(\'connection state: \' + eventSource.readyState + \', error: \' + error);\\n    };\\n\\n    // Fired when a connection to the event source is opened.\\n    eventSource.onopen = function () {\\n        console.log(\'connection is established\');\\n    };\\n\\n    // Fired when data is received from the event source.\\n    eventSource.onmessage = (event) => {\\n        console.log(\'id: \' + event.lastEventId + \', data: \' + event.data);\\n        //console.log(JSON.parse(event.data))\\n        const ul = document.getElementById(\\"messages\\");\\n        const li = document.createElement(\\"li\\");\\n        li.appendChild(document.createTextNode(`${event.data}`));\\n        li.setAttribute(\\"id\\", `msg-${event.lastEventId}`);\\n        ul.appendChild(li);\\n    }\\n<\/script>\\n</body>\\n</html>\\n```\\n\\nCode repository: [https://github.com/devexps/go-sse](https://github.com/devexps/go-sse)\\n\\n## References\\n\\n- [Server-sent events - Wikipedia](https://en.wikipedia.org/wiki/Server-sent_events)\\n- [Golang and Server-Sent Events (SSE)](https://dev.to/rafaelgfirmino/golang-and-sse-3l56)"},{"id":"/2023/05/25/the-interface-and-inheritance-of-golang","metadata":{"permalink":"/2023/05/25/the-interface-and-inheritance-of-golang","source":"@site/blog/2023-05-25-the-interface-and-inheritance-of-golang.md","title":"The interface and inheritance of Golang","description":"The interface and inheritance of Golang","date":"2023-05-25T00:00:00.000Z","formattedDate":"May 25, 2023","tags":[{"label":"go","permalink":"/tags/go"},{"label":"golang","permalink":"/tags/golang"},{"label":"c","permalink":"/tags/c"},{"label":"interface","permalink":"/tags/interface"},{"label":"inheritance","permalink":"/tags/inheritance"}],"readingTime":4.76,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"The interface and inheritance of Golang","description":"The interface and inheritance of Golang","tags":["go","golang","c","c++","interface","inheritance"],"hide_table_of_contents":false},"prevItem":{"title":"Golang microservice framework (Go-Micro) implements SSE service","permalink":"/2023/08/24/go-micro-implements-sse-service"},"nextItem":{"title":"Flutter Theme Demo","permalink":"/2019/09/10/flutter-theme-demo"}},"content":"\x3c!--truncate--\x3e\\n## Golang interface and inheritance\\n\\nGolang is a C-like language designed by Google. It\'s a language used to replace Python. It\'s more C, more process-oriented, not C++, and not so object-oriented. However, I still want to achieve something similar to C++ Interface. In fact, it can be done, although the writing method is more C.\\n\\n### Single inheritance\\nSingle inheritance simply means that there is only one parent class. In terms of specific implementation, I have done two experiments:\\n\\n1. Only interface\\n2. Has a base class\\n\\n#### 1. Only interface\\n\\nIn C++, the pseudo-code is implemented as:\\n\\n```cpp\\ntypedef struct interface;\\n\\ninterface IFruit {\\n    virtual string GetName() const = 0;\\n    virtual void SetName(string name) = 0;\\n    \\n    virtual Type GetType() const = 0;\\n};\\n\\nclass Apple : public IFruit {\\npublic:\\n    virtual string GetName() const {}\\n    virtual void SetName(string name) {}\\n\\n    virtual Type GetType() const {}\\n};\\n```\\n\\nThe implementation in Golang is probably like this:\\n\\nLet\'s define an interface first:\\n\\n````go\\ntype Fruit interface {\\n    GetName() string\\n    SetName(name string)\\n\\t\\n    GetType() Type\\n}\\n````\\n\\nWe have an Apple object:\\n\\n```go\\ntype Apple struct {\\n    name    string\\n}\\n\\nfunc NewApple(name string) *Apple {\\n    c := &Apple{}\\n    c.name = name\\n    return c\\n}\\n\\nfunc (c *Apple) GetName() string {\\n    return c.name\\n}\\n\\nfunc (c *Apple) SetName(name string) {\\n    c.name = name\\n}\\n\\nfunc (c *Apple) GetType() Type {\\n    return AppleType\\n}\\n```\\n\\nWe have a NewApple here for creating new apples, and this method can be used in two ways:\\n\\n1. Assign to interface\\n    ```go\\n    var fruitApple Fruit\\n    fruitApple = NewApple(\\"big\\")\\n    ```\\n2. Assign to yourself\\n    ```go\\n    apple := NewApple(\\"big\\")\\n    ```\\n\\nYou can also use the factory method NewFruit provided by the base class to create fruits:\\n\\n```go\\napple := NewFruit(AppleType, \\"big\\")\\nbanana := NewFruit(BananaType, \\"big\\")\\n```\\n\\n#### 2. Has a base class\\n\\nIn C++, the pseudo-code is implemented as:\\n\\n```cpp\\ntypedef struct interface;\\n\\ninterface IVehicle {\\n    virtual string GetName() const = 0;\\n    virtual void SetName(string name) = 0;\\n\\n    virtual Type GetType() const = 0;\\n\\n    virtual int GetWheelCount() const = 0;\\n    virtual void SetWheelCount(count int) = 0;\\n\\n    virtual string ToString() const = 0;\\n};\\n\\nclass VehicleBase: public IVehicle {\\n    virtual string ToString() const {}\\n};\\n\\nclass Bus : public VehicleBase {\\npublic:\\n    virtual string GetName() const {}\\n    virtual void SetName(string name) {}\\n\\n    virtual Type GetType() const {}\\n\\n    virtual int GetWheelCount() const {}\\n    virtual void SetWheelCount(count int) {}\\n\\n    virtual string ToString() const {}\\n};\\n```\\n\\nThe implementation in Golang is probably like this:\\n\\nLet\'s define an interface first:\\n\\n```go\\ntype Vehicle interface {\\n    GetType() Type\\n\\t\\n    GetName() string\\n    SetName(name string)\\n\\n    GetWheelCount() int\\n    SetWheelCount(count int)\\n\\t\\n    ToString() string\\n}\\n```\\n\\nAnd another base class:\\n\\n```go\\ntype vehicleBase struct {\\n    wheelCount int\\n}\\n\\nfunc (c *vehicleBase) GetWheelCount() int {\\n    return c.wheelCount\\n}\\n\\nfunc (c *vehicleBase) SetWheelCount(count int) {\\n    c.wheelCount = count\\n}\\n\\nfunc (c *vehicleBase) ToString() string {\\n    return \\"vehicle -> \\"\\n}\\n```\\n\\nThen let\'s take some buses. Yes, it combines base classes **vehicleBase**.\\n\\n```go\\ntype Bus struct {\\n    vehicleBase\\n    name string\\n}\\n```\\n\\nHere the bus overrides the base class, and we can call it like this: b.vehicleBase.ToString()\\n\\n```go\\nfunc (b *Bus) ToString() string {\\n    str := fmt.Sprintf(\\"Bus -> %s\\", b.GetName())\\n    return b.vehicleBase.ToString() + str\\n}\\n```\\n\\n### Multiple inheritance\\n\\nMultiple inheritance means having more than one parent class.\\n\\nIn C++, the pseudo-code is implemented as:\\n\\n```cpp\\nclass Father {\\n    virtual string GetName() const {}\\n    virtual string Say() const {}\\n};\\n\\nclass Mother {\\n    virtual string GetName() const {}\\n    virtual string Say() const {}\\n};\\n\\nclass Child : public Father, public Mother {\\n    virtual string GetName() const {}\\n    virtual string Say() const {\\n        Father::GetName();\\n        Mother::GetName();\\n    }\\n};\\n```\\n\\nIn Golang, let\'s make dad first:\\n\\n```go\\ntype Father struct {\\n}\\n\\nfunc NewFather() *Father {\\n    return &Father{}\\n}\\n\\nfunc (c *Father) GetName() string {\\n    return \\"ThangN\\"\\n}\\n\\nfunc (c *Father) Say() string {\\n    return \\"I am \\" + c.GetName()\\n}\\n```\\n\\nSo let\'s start with a mother:\\n\\n```go\\ntype Mother struct {\\n}\\n\\nfunc NewMother() *Mother {\\n    return &Mother{}\\n}\\n\\nfunc (m *Mother) GetName() string {\\n    return \\"HienNTT\\"\\n}\\n\\nfunc (m *Mother) Say() string {\\n    return \\"I am \\" + m.GetName()\\n}\\n```\\n\\nNow, let\'s make a parent\'s successor:\\n\\n```go\\ntype Child struct {\\n    *Mother\\n    Father\\n}\\n\\nfunc NewChild() *Child {\\n    return &Child{}\\n}\\n\\nfunc (c *Child) GetName() string {\\n    return \\"BaoNG\\"\\n}\\n\\nfunc (c *Child) Say() string {\\n    return \\"I am \\" + c.GetName() + \\", My Father is \\" + c.Father.GetName() + \\", My Mother is \\" + c.Mother.GetName()\\n}\\n```\\n\\nIn fact, it\'s nothing, the key lies in anonymous members ***Mother** and **Father**. Here, there are two ways of inheritance:\\n\\n**Non-pointer inheritance**\\n\\n> 1. When the derived class does not override the member method of the base class, the corresponding member method is inherited.\\n> 2. The derived class can directly call the member method of the base class. For example, if the base class has a member method Base.Func(), then Derived.Func() is equivalent to Derived.Base.Func().\\n> 3. If the name of the member method of the derived class is the same as that of the base class, the base class method will be overwritten or hidden. For example, both the base class and the derived class have a member method Func(), then Derived.Func() will only Call the Func() method of the derived class. If you want to call the base class version, you can call it through Derived.Base.Func().\\n\\n**Combination of pointers**\\n\\n> 1. The combination of the base class using the pointer method still has the effect of derivation, but when the derived class creates an instance, a pointer to the base class instance needs to be provided externally.\\n> 2. Other rules are the same as for non-pointer combinations.\\n\\n\\nCode repository: [https://github.com/devexps/go-examples/inheritance](https://github.com/devexps/go-examples/tree/main/inheritance)"},{"id":"/2019/09/10/flutter-theme-demo","metadata":{"permalink":"/2019/09/10/flutter-theme-demo","source":"@site/blog/2019-09-10-flutter-theme-demo.md","title":"Flutter Theme Demo","description":"Flutter Theme Demo","date":"2019-09-10T00:00:00.000Z","formattedDate":"September 10, 2019","tags":[{"label":"dart","permalink":"/tags/dart"},{"label":"flutter","permalink":"/tags/flutter"},{"label":"theme","permalink":"/tags/theme"}],"readingTime":1.53,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Flutter Theme Demo","description":"Flutter Theme Demo","tags":["dart","flutter","theme"],"hide_table_of_contents":false},"prevItem":{"title":"The interface and inheritance of Golang","permalink":"/2023/05/25/the-interface-and-inheritance-of-golang"},"nextItem":{"title":"Kubernetes Tutorial for Beginners","permalink":"/2019/09/06/kubernetes-tutorial-for-beginners"}},"content":"\x3c!--truncate--\x3e\\n\\nYou can share the colors, font styles for screens in your app by using themes. You can define multiple **theme** datas and set it to the theme widgets. You just created at the roof of an apps by the **MaterialApp**.\\n\\n<p align=\\"center\\">\\n<img src=\\"/assets/thoughts/flutter-mobile/flutter-theme-demo/flutter_theme_demo.gif\\" width=\\"320px\\" />\\n</p>\\n\\nBelow is step-by-step tutorial to setup the theme for flutter apps, also we\'ll see how to manually switch theme on specific events. I\'ll assume you know [how to setup a flutter app](/2019/08/25/first-app-and-basic-structure-in-flutter/) so we\u2019ll skip that part.\\n\\nTo manually switch theme in Flutter we needs a package to support push events to another widgets. We\'re going to use the [provider](https://pub.dev/packages/provider) package.\\n\\nSo first step is to include the packages in *pubspec.yaml* file. For that just add the package name under the dependencies. It would look something like this.\\n\\n```yaml\\ndependencies:\\n  provider: ^3.1.0\\n```\\n\\nWe\'ll import it in the main.dart file first. Goto your main.dart file and add import the package.\\n\\n```dart\\nimport \'package:provider/provider.dart\';\\n\\nvoid main() => runApp(\\n  ChangeNotifierProvider<GlobalModel>(\\n      builder: (context) => GlobalModel(),\\n      child: MyApp(),\\n    ),\\n  );\\n//...\\n```\\n\\nThe next step is define the **theme data**.\\n```dart\\nclass GlobalModel {\\n\\n  var themeData = ThemeData(\\n    primaryColor: Colors.redAccent,\\n    appBarTheme: AppBarTheme(\\n      iconTheme: IconThemeData(\\n        color: Colors.white,\\n        size: 40\\n      ),\\n      textTheme: TextTheme(\\n        title: TextStyle(\\n          color: Colors.white,\\n          fontSize: 20,\\n        )\\n      )\\n    ),\\n  );\\n\\n  //...\\n}\\n```\\nNext step is setup theme data into your app.\\n\\n```dart\\nfinal model = Provider.of<GlobalModel>(context);\\nreturn MaterialApp(\\n  title: \'Flutter Theme Demo\',\\n  theme: model.themeData\\n  //...\\n);\\n```\\n\\nFinal step is change theme data.\\n```dart\\nfinal model = Provider.of<GlobalModel>(context);\\nmodel.themeData = ThemeData(\\n  brightness: Brightness.dark,\\n  appBarTheme: AppBarTheme(\\n    iconTheme: IconThemeData(\\n      color: Colors.grey,\\n      size: 40\\n    ),\\n    textTheme: TextTheme(\\n      title: TextStyle(\\n        color: Colors.grey,\\n        fontSize: 20,\\n      )\\n    )\\n  ),\\n);\\nmodel.notifyListeners();\\n```\\nThat\'s all for this article, you can checkout the source code of the example [at here](https://github.com/devexps/flutter/tree/master/mobile/flutter_theme).\\n\\nOkay, I\'ll see you next article and enjoy!"},{"id":"/2019/09/06/kubernetes-tutorial-for-beginners","metadata":{"permalink":"/2019/09/06/kubernetes-tutorial-for-beginners","source":"@site/blog/2019-09-06-kubernetes-tutorial-for-beginners.md","title":"Kubernetes Tutorial for Beginners","description":"Kubernetes Tutorial for Beginners","date":"2019-09-06T00:00:00.000Z","formattedDate":"September 6, 2019","tags":[{"label":"kubernetes","permalink":"/tags/kubernetes"},{"label":"tutorial","permalink":"/tags/tutorial"},{"label":"devops","permalink":"/tags/devops"},{"label":"kube","permalink":"/tags/kube"},{"label":"kubectl","permalink":"/tags/kubectl"}],"readingTime":6.78,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Kubernetes Tutorial for Beginners","description":"Kubernetes Tutorial for Beginners","tags":["kubernetes","tutorial","devops","kube","kubectl"],"hide_table_of_contents":false},"prevItem":{"title":"Flutter Theme Demo","permalink":"/2019/09/10/flutter-theme-demo"},"nextItem":{"title":"Docker Tutorial for Beginners","permalink":"/2019/09/04/docker-tutorial-for-beginners"}},"content":"\x3c!--truncate--\x3e\\n\\nKubernetes is an open-source system for automating deployment, scaling and managing containerized applications. With this platform, we can decompose (or orchestrate) our applications into smaller systems (called microservices) while developing.\\n\\nCurrently, several services around the global provide different Kubernetes implementations:\\n\\n- **Minikube**: An open-source tool that we can install in our local machine to use Kubernetes locally. This tool uses a virtualization solution (like VirtualBox or similar) to set up a local Kubernetes cluster.\\n- Google Kubernetes Engine (**GKE**), Amazon Elastic Kubernetes Service (**EKS**), Azure Kubernetes Service (**AKS**), OpenShift Kubernetes.\\n\\nAmong the most popular above, **Minikube** is the only solution that is free forever, but it is also not that useful, as it runs locally only. Some of the other solutions offer free tiers that will allow to get started without paying a dime, they will charge we money to keep our clusters running eventually.\\n\\n<p align=\\"center\\">\\n<img src=\\"/assets/thoughts/devops/hello_kube_with_go/kube_ingress.png\\" width=\\"100%\\" alt=\\"Ingress Model - kubernetes.io\\" />\\n</p>\\n\\n### Installing Kube Control (kubectl)\\n\\nBefore spinning up a Kubernetes cluster, we\'ll need a tool called **kubectl**. This tool will allow we to manage our Kubernetes cluster with easy from a terminal. To install *kubectl*, we should head to this resource and choose from the list shown - the instructions for our operating system.\\n\\nOnce the installation is complete, type the following command to start a Kubernetes cluster:\\n\\n```console\\n$ minikube start\\n\ud83d\ude04  minikube v1.3.1 on Darwin 10.14.1\\n\ud83d\udd25  Creating virtualbox VM (CPUs=2, Memory=2000MB, Disk=20000MB) ...\\n\ud83d\udc33  Preparing Kubernetes v1.15.2 on Docker 18.09.8 ...\\n\ud83d\ude9c  Pulling images ...\\n\ud83d\ude80  Launching Kubernetes ...\\n\u231b  Waiting for: apiserver proxy etcd scheduler controller dns\\n\ud83c\udfc4  Done! kubectl is now configured to use \\"minikube\\"\\n```\\n\\nAfter following these instructions, installing and starting *kubectl* in our machine, we can confirm that the tool is indeed available by terminal command:\\n\\n```console\\n$ kubectl version\\nClient Version: version.Info{Major:\\"1\\", Minor:\\"15\\", GitVersion:\\"v1.15.2\\", GitCommit:\\"f6278300bebbb750328ac16ee6dd3aa7d3549568\\", GitTreeState:\\"clean\\", BuildDate:\\"2019-08-05T16:54:35Z\\", GoVersion:\\"go1.12.7\\", Compiler:\\"gc\\", Platform:\\"darwin/amd64\\"}\\nServer Version: version.Info{Major:\\"1\\", Minor:\\"15\\", GitVersion:\\"v1.15.2\\", GitCommit:\\"f6278300bebbb750328ac16ee6dd3aa7d3549568\\", GitTreeState:\\"clean\\", BuildDate:\\"2019-08-05T09:15:22Z\\", GoVersion:\\"go1.12.5\\", Compiler:\\"gc\\", Platform:\\"linux/amd64\\"}\\n```\\n\\nThe output of the above command will show the client version, the release of *kubectl*. And this means is that we have *kubectl* properly installed successfully.\\n\\n### Deploying a Kubernetes Application\\n\\nAfter all this setup, now it is time to deploy our first Kubernetes application. As such, to speed up the process, instead of creating a new application for that, we will deploy a sample application that we already exists. [Yes, we had one :)](/2019/09/04/docker-tutorial-for-beginners/)\\n\\nThe first thing we\'ll do is to create a lot of YAML files, because while using Kubernetes, we\'ll often use this **markup language** to describe the resources that we\'ll orchestrate in our clusters.\\n\\nThe first, create a file called **hello-kube-deployment.yaml** inside our project\'s directory, and add the following code to it, like this:\\n\\n```yaml\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: hello-kube-deployment\\nspec:\\n  replicas: 2\\n  selector:\\n    matchLabels:\\n      app: hello-kube-deployment\\n  template:\\n    metadata:\\n      labels:\\n        app: hello-kube-deployment\\n    spec:\\n      containers:\\n      - name: hello-kube-app\\n        image: devexps/hello-kube-app\\n        ports:\\n          - containerPort: 12345\\n```\\n\\nWell, this configuration file is not struggle to understand. Basically, this file define a deployment object (**kind: Deployment**) that creates a container named **hello-kube-app**. This container uses an image called **devexps/hello-kube-app** to run the sample go application. By default, Kubernetes will try to fetch images from the public [Docker Hub](https://hub.docker.com/u/devexps) registry. However, we can also use private registries if we want to keep our images.\\n\\nNow, We don\'t worry about the other properties of this file, we\'ll learn about them when the time comes. However, we need to focus on some important parts first:\\n\\n- **Deployment**: a description of the desired state of the system. In this case, we want to tell with Kubernetes cluster that how many **pods** of a particular application we want running. And we\'re specifying that we want two *pods* (**replicas: 2**)\\n\\n- **Container**: a part of a *pod* that holds running applications, libraries, dependencies, etc. *Containers* can be exposed to the world through an external IP address.\\n\\n- **Pod**: is the smallest deployable unit of computing that can be created and managed in Kubernetes ([the official document](https://kubernetes.io/docs/concepts/workloads/pods/pod/)). In this case, our pods containt a single container - the sample go application.\\n\\nThen, to run this deployment in our kubernetes cluster, make sure we\'re just inside our project\'s directory, and following the command line:\\n\\n```console\\n$ kubectl apply -f hello-kube-deployment.yaml\\ndeployment.apps/hello-kube-deployment created\\n```\\n\\nAfter running above command, cluster will be starting and it make an effort to run both *pods* (*replicas: 2*) on our cluster\'s nodes. Now, typing the command to confirm that our pods are indeed up and running:\\n\\n```console\\n$ kubectl get pods\\nNAME                                     READY   STATUS    RESTARTS   AGE\\nhello-kube-deployment-7ffbc4f9f9-99442   1/1     Running   0          19s\\nhello-kube-deployment-7ffbc4f9f9-jqn45   1/1     Running   0          19s\\n```\\n\\nWe\'ll see a list of available pods in our Kubernetes cluster. On that list, we can see that we have two pods and each pod containers we also see their *READY*, *STATUS*, how many times *RESTARTS* and *AGE*.\\n\\nNow, we might be thinking that \\"great, I just deployed a sample Go application into my Kubernetes cluster, now I can start using it with a browser\\". Well, you can try using it :). But things are not that simple, the problem is that each pods by itself is not accessible by the outside world. Each one of these pods has a different *IP address* inside our cluster, if one of them stops working (for whatever reason), Kubernetes will launch a new pod and will give another *IP address* for that pod. Therefore, it would be difficult for our to keep and track these *IP addresses* manually. To solve this problem, we\'ll use Kubernetes\'s services.\\n\\nReally simple, create a file called **hello-kube-service.yaml** and insert the following code to it:\\n\\n```yaml\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: hello-kube-service\\nspec:\\n  ports:\\n  - port: 8080\\n    protocol: TCP\\n    targetPort: 12345\\n  selector:\\n    app: hello-kube-deployment\\n  type: ClusterIP\\n```\\n\\nIn this file, we added the **selector.app** property on the service description, pointing to **hello-kube-deployment**. Kubernetes will use these properties to tie this service to the deployment\'s pods. And we\'re defining that this service will listen on **port: 8080** and that it will **targetPort: 12345** on pods. If recheck on our deployment file, we\'ll see that our containers will use correctly this port (**containerPort: 12345**). That really important, to make sure that our service will target the correct port when redirecting requests to our pods.\\n\\nThen, we can use the following command to create this service in our Kubernetes cluster:\\n\\n```console\\n$ kubectl apply -f hello-kube-service.yaml\\nservice/hello-kube-service created\\n```\\n\\nAfter running above command, Kubernetes will create a service to represent our deployment in cluster. Finally, we need to define an **ingress** to expose this service to the outside world. Let\'s create a file called **hello-kube-ingress.yaml** with the following code:\\n\\n```yaml\\napiVersion: extensions/v1beta1\\nkind: Ingress\\nmetadata:\\n  name: hello-kube-ingress\\nspec:\\n  rules:\\n  - http:\\n      paths:\\n      - path: /\\n        backend:\\n          serviceName: hello-kube-service\\n          servicePort: 8080\\n```\\n\\nIn this file, we define an [ingress resource with a single rule](https://kubernetes.io/docs/concepts/services-networking/ingress) (**spec.rules**), tell with Kubernetes that we want requests pointing to the root path (**path: /**) to redirect to the **hello-kube-service** on port (**servicePort: 8080**)\\n\\nTo deploy the new *ingress** in our cluster, we can follow the command line:\\n\\n```console\\n$ kubectl apply -f hello-kube-ingress.yaml\\ningress.extensions/hello-kube-ingress created\\n```\\n\\nThen, to see the result, we\'ll need to get the public IP address of our Kubernetes cluster, let\'s following the command below:\\n\\n```console\\n$ minikube ip\\n192.168.99.102\\n```\\n\\nThis command will output an IP address that we can use in our browser to see the result. So, if we open the browser and navigate to this IP address, we\'ll see the sample Go application that we just deployed. Simply way with the terminal:\\n\\n```console\\n$ curl http://192.168.99.102\\nHello devexps from a docker container and Kubernetes\\n```\\n\\nThat\'s it! we created a Kubernetes cluster on local machine and used it to spin up a sample Go application. While deploying this app, we learned basic Kubernetes concepts like *deployments*, *pods*, *containers*, *services* and *ingresses*. With this knowledge, we are now ready to move on Kubernetes advanced concepts.\\n\\nYou can find the complete source code for the Go app and all YAML files in the [Github Repository](https://github.com/devexps/devops/tree/master/hello_kube_with_go).\\n\\nOkay, I\'ll see you next article, see you soon!"},{"id":"/2019/09/04/docker-tutorial-for-beginners","metadata":{"permalink":"/2019/09/04/docker-tutorial-for-beginners","source":"@site/blog/2019-09-04-docker-tutorial-for-beginners.md","title":"Docker Tutorial for Beginners","description":"Docker Tutorial for Beginners","date":"2019-09-04T00:00:00.000Z","formattedDate":"September 4, 2019","tags":[{"label":"Docker","permalink":"/tags/docker"},{"label":"tutorial","permalink":"/tags/tutorial"},{"label":"devops","permalink":"/tags/devops"}],"readingTime":5.775,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Docker Tutorial for Beginners","description":"Docker Tutorial for Beginners","tags":["Docker","tutorial","devops"],"hide_table_of_contents":false},"prevItem":{"title":"Kubernetes Tutorial for Beginners","permalink":"/2019/09/06/kubernetes-tutorial-for-beginners"},"nextItem":{"title":"Flutter execute code with MicroTask queue and Event queue","permalink":"/2019/08/27/flutter-execute-code-with-microtask-queue-and-event-queue"}},"content":"\x3c!--truncate--\x3e\\n\\n> **THE OFFICIAL DESCRIPTION**  \\n> Docker is an open platform for developing, shipping, and running applications. Docker enables you to separate your applications from your infrastructure so you can deliver software quickly. With Docker, you can manage your infrastructure in the same ways you manage your applications. By taking advantage of Docker\u2019s methodologies for shipping, testing, and deploying code quickly, you can significantly reduce the delay between writing code and running it in production.\\n\\nBack in the day, an application would be created and run on a machine. There was a ratio of 1:1. One application, one machine. We always purchased the most powerful machine possible to cover our asses, errors. The result of this is many machines only ran at a small fraction of their capacity. After that, we have the **virtual machines** - include the application, the necessary binaries and libraries, and an entire guest operating system. And we have the **containers** - include the application and all of its dependencies, share the kernel with other containers, running as isolated processes in user space on the host operating system.\\n\\n<p align=\\"center\\">\\n<img src=\\"/assets/thoughts/devops/hello_docker_with_go/docker.png\\" width=\\"600px\\" alt=\\"Docker Engine - docs.docker.com\\" />\\n</p>\\n\\nAnd now, **Docker** is the most popular container system. We can run those containers on physical machines. Docker containers wrap a piece of software in a complete filesystem that contains everything needed to run: code, runtime, system tools, system libraries, etc. anything that can be installed on a server. We can build an **image** and then create as many **containers** as we would like from that image. With docker we\'re easy to identify issues, isolate the problem container, quickly roll back to make the necessary changes, and then push the updated container into production.\\n\\n### Docker basic\\n\\nWe can install Docker on our machine in a variety of ways. It depends on our machine to choose the best installation ways. Let\'s follow from source site to [install docker](https://docs.docker.com/install/) for our machine.\\n\\nOnce the installation is complete, it is a good idea to ensure that we have a supported version of Docker.\\n\\n```console\\n$ docker version\\n```\\n\\nOnce Docker is installed, all we need to do is use the test image to check that everything is working as it should. Do this with the following command:\\n\\n```console\\n$ docker run hello-world\\n```\\n\\nWe can see all containers (processes) on your machine:\\n\\n```console\\n$ docker ps -a\\n\\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                     PORTS                    NAMES\\n68f71db7590c        hello-world         \\"/hello\\"                 7 minutes ago       Exited (0) 7 minutes ago                            mystif\\n```\\n\\n### Hello app with Go\\n\\nSo let\'s write the \\"Hello, World\\" program in Go and understand how it works. Open our favorite text editor, create a new file named **main.go**, and type in the following code:\\n\\n```golang\\npackage main\\n\\nimport (\\n\\t\\"io\\"\\n\\t\\"net/http\\"\\n)\\n\\nfunc main() {\\n\\thttp.HandleFunc(\\"/\\", index)\\n\\thttp.ListenAndServe(\\":12345\\", nil)\\n}\\n\\nfunc index(w http.ResponseWriter, r *http.Request) {\\n\\tio.WriteString(w, \\"Hello devexps from a docker container\\")\\n}\\n```\\n\\nIf we want to ignore any files or directories in our build, add a **.dockerignore** file. For example, the content in it like this:\\n\\n```dockerignore\\n*.md\\n*.markdown\\n```\\n\\nNext to the important step, creating a docker file for hello world program. The docker file must be named **Dockerfile**. The docker file will include *everything* in the current directory, and descendent directories, in the image which is built (unless told to ignore something by the *.dockerignore* file)\\n\\nThe docker file must have **FROM** as the first instruction. The FROM says what image we are building this image from. We can add in a **MAINTAINER** instruction to say that who built this image. We can also have a comment on the first line. Docker file comments are # hash symbols. So our docker file will be:\\n\\n```dockerfile\\n# A hello world example with Go\\n\\nFROM golang:latest as builder\\n\\n# Add maintainer info\\nMAINTAINER devexps@gmail.com\\n\\nWORKDIR /app\\nCOPY . .\\n\\n# Build the Go app\\nARG CGO_ENABLED=0\\nRUN go build -o main .\\n\\nFROM scratch\\n\\nWORKDIR /app\\nCOPY --from=builder /app .\\n\\n# Command to run the executable\\nCMD [\\"./main\\"]\\n```\\n\\nNow, time for build our image:\\n\\n```console\\n$ docker build -t hello-app .\\n```\\n\\n- **-t** means the tag or give it a name. The name we gave it is \\"*hello-app*\\"  \\n- The dot \\"**.**\\" means the code for this image is in this current directory.\\n\\nNow create a container from our image and run it. Type the following command to run the docker image:\\n\\n```console\\n$ docker run -d -p 8080:12345 hello-app\\n```\\n\\n- **-d** means run this detached, as a daemon, not dependent on the terminal session.  \\n- **-p** means map ports, mapping **[host machine port] : [to docker container port]**\\n\\nWe can list all the running containers like this:\\n\\n```console\\n$ docker container ls\\n\\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS         \\n6f0a8d66c0f1        hello-app           \\"./main\\"                 7 minutes ago       Up 7 minutes        0.0.0.0:8080->12345/tcp\\n```\\n\\nNow, go to our browser and see if it\'s running [localhost:8080](http://localhost:8080/) or quick test with *Curl* command line.\\n\\n```console\\n$ curl http://localhost:8080\\nhello devexps from a docker container\\n```\\n\\nTo stop the container, type the following command with the container id:\\n\\n```console\\n$ docker container stop 6f0a8d66c0f1\\n```\\n\\n### Publish Docker image to Docker Hub\\n\\nDocker Hub is the place where open Docker images are stored. When we ran our first image by typing:\\n\\n```console\\n$ docker run -d -p 8080:12345 devexps/hello-app\\n\\nUnable to find image \'devexps/hello-app:latest\' locally\\nlatest: Pulling from devexps/hello-app\\n7f7b7d60d331: Pull complete\\n00c734b6a26d: Pull complete\\nDigest: sha256:7e00b185dbe2985625e7685b3ee081bf4e3e56c09968eff95ca8345bdfb24d4b\\nStatus: Downloaded newer image for devexps/hello-app:latest\\n...\\n```\\n\\nThe software first checked if this image is available on our computer and since it wasn\'t it downloaded the image from Docker Hub. So getting an image from Docker Hub works sort of automatically. And now, we will be pushing our built image to the Docker Hub so that we can use it anywhere.\\n\\nLog into the Docker Hub registry on our local machine. (If you don\'t have account make it here [https://hub.docker.com/](https://hub.docker.com/))\\n\\n```console\\n$ docker login\\n```\\n\\nTag the image, it is more like naming the version of the image. It\'s optional but it is recommended as it helps in maintaining the version\\n\\n```console\\n$ docker tag hello-app <your-username>/hello-app:latest\\n```\\n\\nPublish the image, upload our tagged image to the repository. Once complete, the results of this upload are publicly available.\\n\\n```console\\n$ docker push <your-username>/hello-app:latest\\n```\\n\\nIf you log into Docker Hub, you will see the new image there, with its pull and run command.\\n\\n```console\\n$ docker run -d -p 8080:12345 <your-username>/hello-app:latest\\n```\\n\\nOkay, that is all in this article. We started with basically docker setup, run and check. We wrote a simple Go application. And we knew how to build an optimized image for Go application. Finally, published our build image to the Docker Hub.\\n\\nYou can find the complete source code for the Go app and all the Dockerfile in the [Github Repository](https://github.com/devexps/devops/tree/master/hello_docker_with_go).\\n\\nI hope you enjoyed the article. See you in the next article."},{"id":"/2019/08/27/flutter-execute-code-with-microtask-queue-and-event-queue","metadata":{"permalink":"/2019/08/27/flutter-execute-code-with-microtask-queue-and-event-queue","source":"@site/blog/2019-08-27-flutter-execute-code-with-microtask-queue-and-event-queue.md","title":"Flutter execute code with MicroTask queue and Event queue","description":"Flutter execute code with MicroTask queue and Event queue","date":"2019-08-27T00:00:00.000Z","formattedDate":"August 27, 2019","tags":[{"label":"flutter","permalink":"/tags/flutter"},{"label":"microtask","permalink":"/tags/microtask"},{"label":"queue","permalink":"/tags/queue"},{"label":"event","permalink":"/tags/event"}],"readingTime":2.69,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Flutter execute code with MicroTask queue and Event queue","description":"Flutter execute code with MicroTask queue and Event queue","tags":["flutter","microtask","queue","event"],"hide_table_of_contents":false},"prevItem":{"title":"Docker Tutorial for Beginners","permalink":"/2019/09/04/docker-tutorial-for-beginners"},"nextItem":{"title":"Localization & switching locales in Flutter","permalink":"/2019/08/27/localization-and-switching-locales-in-flutter"}},"content":"\x3c!--truncate--\x3e\\n\\n### Dart is a single threaded language\\nFirst thing, everyone need to known that Dart is **a single thread** and Flutter replies on Dart.\\n\\n> ***IMPORTANT***  \\n> Dart executes **one operation at a time, one after the other** meaning that as long as one operation is executing, it cannot be interrupted by any other Dart code.\\n\\n```dart\\nvoid myLoop(){\\n    for (int i = 0; i < 1000; i++){\\n        _doSomething();\\n    }\\n}\\n```\\nIn the example above, the execution of the `myLoop()` method will never be interrupted until it completes. As a consequence, if this method takes some time, the thread will be `\u201cblocked\u201d` during the whole method execution complete, the application will be `\\"blocked\\"` during too.\\n\\n### The Dart execution model\\n\\n<img src=\\"/assets/thoughts/flutter-mobile/flutter-thread/dart-start-app.png\\" width=\\"100%\\" alt=\\"Flutter (or any Dart) app start\\" />\\n\\nWhen start a Flutter (*or any Dart*) application, a new **Thread** process (in Dart language call *isolate*) is created and Launched. This thread will be only one that you need to care for the entire application.\\n\\nAfter **main thread** created, Dart automatically:  \\n1. initializes 2 Queues, namely `\u201cMicroTask\u201d` and `\u201cEvent\u201d` FIFO queues;\\n2. executes the **main()** method and, once this code execution is completed;\\n3. launches the `Event Loop`\\n\\n<img src=\\"/assets/thoughts/flutter-mobile/flutter-thread/dart-event-loop.png\\" width=\\"100%\\" alt=\\"Flutter (or any Dart) app start\\" />\\n\\nDuring the whole life of the thread, a single internal and invisible process, called the `\u201cEvent Loop\u201d`, will drive the way your code will be executed and in which sequence order, depending on the content of both **MicroTask Queue** and **Event** queues.\\n\\nThe *Event Loop* corresponds to some kind of **infinite** loop, cadence by an internal clock which, at each tick, if no other Dart code is being executed, does something like the following:\\n```dart\\nstatic void eventLoop() {\\n    while (microTaskQueue.isNotEmpty){\\n        fetchFirstMicroTaskFromQueue();\\n        executeThisMicroTask();\\n        return;\\n    }\\n\\n    if (eventQueue.isNotEmpty){\\n        fetchFirstEventFromQueue();\\n        executeThisEventRelatedCode();\\n    }\\n}\\n```\\nAs we can see the MicroTask Queue has precedence over the Event Queue.\\n\\n### MicroTask Queue\\nThe *MicroTask* queue is used for **very short** internal actions that need to be run *asynchronously*, right after something else completes and before giving the hand back to the Event queue.\\n\\nAs an example of a *MicroTask* you could imagine having to dispose a resource, right after it has been closed. As the closure process could take some time to complete, you could write something like this:\\n```dart\\n    MyResource myResource;\\n\\n    //...\\n\\n    void closeAndRelease() {\\n        scheduleMicroTask(_dispose);\\n        _close();\\n    }\\n\\n    void _close(){\\n        // The code to be run synchronously\\n        // to close the resource\\n        //...\\n    }\\n\\n    void _dispose(){\\n        // The code which has to be run\\n        // right after the _close()\\n        // has completed\\n    }\\n```\\n\\n### Event Queue\\nThe *Event* queue is used to reference operations that result from  \\n* external events such as  \\n     * I/O;\\n     * gesture;\\n     * drawing;\\n     * timers;\\n     * streams;\\n     * \u2026\\n* futures  \\n\\nIn fact, each time an **external** event is triggered, the corresponding code to be executed is referenced into the *Event* queue.\\n\\nAs soon as there is no longer any *micro task* to run, the *Event Loop* considers the first item in the *Event* Queue and will execute it.\\n\\nIt is very interesting to note that **Futures** are also handled via the *Event* queue.\\n\\nOkay, that\'s all and I\'ll see you next article, enjoy!"},{"id":"/2019/08/27/localization-and-switching-locales-in-flutter","metadata":{"permalink":"/2019/08/27/localization-and-switching-locales-in-flutter","source":"@site/blog/2019-08-27-localization-and-switching-locales-in-flutter.md","title":"Localization & switching locales in Flutter","description":"Localization & switching locales in Flutter","date":"2019-08-27T00:00:00.000Z","formattedDate":"August 27, 2019","tags":[{"label":"flutter","permalink":"/tags/flutter"},{"label":"localization","permalink":"/tags/localization"},{"label":"i18n","permalink":"/tags/i-18-n"}],"readingTime":5.825,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Localization & switching locales in Flutter","description":"Localization & switching locales in Flutter","tags":["flutter","localization","i18n"],"hide_table_of_contents":false},"prevItem":{"title":"Flutter execute code with MicroTask queue and Event queue","permalink":"/2019/08/27/flutter-execute-code-with-microtask-queue-and-event-queue"},"nextItem":{"title":"First app and basic structure in Flutter","permalink":"/2019/08/25/first-app-and-basic-structure-in-flutter"}},"content":"\x3c!--truncate--\x3e\\n\\nIf your app might be deployed to users who speak another language then you\'ll need to **internationalize** it. You\'ll need to write the app in a way that makes it possible to **localize** values like text and layouts for each language that the app supports.\\n<p align=\\"center\\">\\n<img src=\\"/assets/thoughts/flutter-mobile/flutter-localization/flutter_localization_example.gif\\" width=\\"320px\\" alt=\\"flutter localization example\\" />\\n</p>\\n\\nSo here\'s an easy step by step tutorial for internationalization of your flutter app, also we\'ll see how to manually switch your App\'s Locale on specific events. I\'ll assume you know [how to setup a flutter app](/2019/08/25/first-app-and-basic-structure-in-flutter/) so we\u2019ll skip that part.\\n\\nLocalization in Flutter is like any other thing, a Widget. We\'re going to use the package flutter_localizations that is based on Dart [intl](https://pub.dev/packages/intl) package.\\n\\nSo first step is to include the packages in *pubspec.yaml* file. For that just add the 2 packages name under the dependencies. It would look something like this.\\n\\n```yaml\\ndependencies:\\n  flutter:\\n    sdk: flutter\\n  flutter_localizations:\\n    sdk: flutter\\n\\ndev_dependencies:  \\n  intl_translation: ^0.17.6\\n```\\n\\nThe first one says our package needs the localization Flutter package to run, and the second give us the tools to generate dart code with the messages from .arb files. You can now use it in your app anywhere simply by importing it. We\'ll import it in the main.dart file first. Goto your main.dart file and add import the package.\\n\\n```dart\\nimport \'package:flutter_localizations/flutter_localizations.dart\';\\nimport \'package:intl/intl.dart\';\\n\\nvoid main() => runApp(MyApp());\\n```\\n\\nThe next step is to setup the Localization delegates in your main.dart file. For that you need to specify the 3 delegates, and supported locales.\\n\\n```dart\\nreturn MaterialApp(\\n  localizationsDelegates: [\\n    GlobalMaterialLocalizations.delegate,\\n    GlobalWidgetsLocalizations.delegate,\\n    MyLocalizationsDelegate()\\n  ],\\n  supportedLocales: [\\n    const Locale(\'en\', \'US\'),\\n    const Locale(\'vi\', \'VN\'),\\n  ],\\n  //...\\n);\\n```\\n\\nAs you can see here, we added 3 lists to our Material app localizationsDelegates & supportedLocales. The supportedLocales parameter holds the list of languages that our app will support. Here you will specify list of languages_codes.\\n\\n- **GlobalMaterialLocalizations.delegate** provides localized strings and other values for the Material Components library.\\n- **GlobalWidgetsLocalizations.delegate** defines the default text direction, either left to right or right to left, for the widgets library.\\n- **MyLocalizationsDelegate** to provide this resources to our app.\\n\\nNext step is to create an *MyLocalizations* & *MyLocalizationsDelegate*. Classes in which we\'ll be defining our keywords and their translations. I suggest you create this class in a folder in your lib directory. For example */lib/l10n/localization_intl.dart*\\n\\n```dart\\nimport \'package:flutter/material.dart\';\\nimport \'package:intl/intl.dart\';\\n\\nclass MyLocalizations {\\n  static Future<MyLocalizations> load(Locale locale) {\\n    final String name = locale.countryCode.isEmpty\\n      ? locale.languageCode\\n      : locale.toString();\\n    final String localeName = Intl.canonicalizedLocale(name);\\n\\n    return initializeMessages(localeName).then((b) {\\n      Intl.defaultLocale = localeName;\\n      return new MyLocalizations();\\n    });\\n  }\\n\\n  static MyLocalizations of(BuildContext context) {\\n    return Localizations.of<MyLocalizations>(context, MyLocalizations);\\n  }\\n\\n  //your list of locale here...\\n}\\n\\nclass MyLocalizationsDelegate extends LocalizationsDelegate<MyLocalizations> {\\n  const MyLocalizationsDelegate();\\n\\n  @override\\n  bool isSupported(Locale locale) => [\\n        \'en\',\\n        \'vi\'\\n      ].contains(locale.languageCode);\\n\\n  @override\\n  Future<MyLocalizations> load(Locale locale) {\\n    return MyLocalizations.load(locale);\\n  }\\n\\n  @override\\n  bool shouldReload(MyLocalizationsDelegate old) => false;\\n}\\n```\\n\\nThe *MyLocalizations* class will only have 2 static methods for now:\\n\\n- **load** function will load the string resources from the desired Locale as you can see in the parameter.\\n- **of** function will be a helper to facilitate the access to any string from any part of the app code.\\n\\n**NOTE**: **initializeMessages** method will be generated by the *intl* tool, note the import *l10n/messages_all.dart* , this file contains the method that effectively load the translated messages.\\n\\nThe **MyLocalizationsDelegate** can be divided in three main pieces:\\n- **load** method must return an object that contains a collection of related resources. We return our *MyLocalizations.load*\\n- **isSupported** with boolean return type, it returns *true* if the app has support for the received *locale*\\n- **shouldReload** simply, if this method returns true then all the app widgets will be rebuilt after the *load* of resources.\\n\\nAnd here, the list of locales in this article:\\n\\n```dart\\n//your list of locale here...\\n\\nString get welcome {\\n  return Intl.message(\\n    \'Hello! \',\\n    name: \'welcome\',\\n    desc: \'welcome\',\\n  );\\n}\\n\\nString taskItems(int taskNumbers) {\\n  return Intl.plural(taskNumbers,\\n      zero: \\"You have never written a list of tasks.\\\\nLet\'s get started soon.\\",\\n      one: \\"This is your todo-list,\\\\nToday, you have 1 task to complete. \\",\\n      many: \\"This is your todo-list,\\\\nToday, you have $taskNumbers tasks to complete. \\",\\n      other: \\"This is your todo-list,\\\\nToday, you have $taskNumbers tasks to complete. \\",\\n      args: [\\n        taskNumbers\\n      ],\\n      name: \\"taskItems\\");\\n}\\n\\nString get languageTitle {\\n  return Intl.message(\\n    \'Change Language\',\\n    name: \'languageTitle\',\\n    desc: \'languageTitle\',\\n  );\\n}\\n```\\n\\nThe final step is to create the string translations. Create a *res directory* in your project folder. This directory will hold all the translated values as per your Locale. We run this dart intl tool command to generate an **.arb** template.\\n\\n```console\\n$ flutter pub pub run intl_translation:extract_to_arb \\\\\\n  --output-dir=res/ \\\\\\n  lib/l10n/localization_intl.dart\\n```\\n\\nThis command will generate a file called **intl_messages.arb** file into *res directory* and this file serves as a template for the English language, we have to create the desired translations based on this file:\\n\\n```\\n\u251c\u2500\u2500 res\\n\u251c\u2500\u2500\u2500\u2500 intl_messages.arb\\n```\\n\\n**NOTE**: The Dart intl package only creates one template file of .arb from your MyLocalizations class and names it *intl_messages.arb*. From here you now have to manually create other resource files with convention *intl_[LANGUAGE_CODE].arb* and copy the content of *intl_messages.arb* directly with updated the values.\\n\\nFor example, in this article, we\'ll create files and copy content from *intl_messages.arb* like this:\\n\\n```\\n\u251c\u2500\u2500 res\\n\u251c\u2500\u2500\u2500\u2500 intl_messages.arb\\n\u251c\u2500\u2500\u2500\u2500 intl_en_US.arb\\n\u251c\u2500\u2500\u2500\u2500 intl_vi_VN.arb\\n```\\n\\n**/res/intl_en_US.arb**\\n```json\\n{\\n  \\"@@last_modified\\": \\"2019-08-27T12:45:48.112434\\",\\n  \\"welcome\\": \\"Hello! \\",\\n  \\"@welcome\\": {\\n    \\"description\\": \\"welcome\\",\\n    \\"type\\": \\"text\\",\\n    \\"placeholders\\": {}\\n  },\\n  \\"taskItems\\": \\"{taskNumbers,plural, =0{You have never written a list of tasks.\\\\nLet\'\'s get started soon.}=1{This is your todo-list,\\\\nToday, you have 1 task to complete. }many{This is your todo-list,\\\\nToday, you have {taskNumbers} tasks to complete. }other{This is your todo-list,\\\\nToday, you have {taskNumbers} tasks to complete. }}\\",\\n  \\"@taskItems\\": {\\n    \\"type\\": \\"text\\",\\n    \\"placeholders\\": {\\n      \\"taskNumbers\\": {}\\n    }\\n  },\\n  \\"languageTitle\\": \\"Change Language\\",\\n  \\"@languageTitle\\": {\\n    \\"description\\": \\"languageTitle\\",\\n    \\"type\\": \\"text\\",\\n    \\"placeholders\\": {}\\n  }\\n}\\n```\\n\\nOkay, with the translations ready, we are going to link the *initializeMessages*. This is made with the follow command:\\n\\n```console\\n$ flutter pub pub run intl_translation:generate_from_arb \\\\\\n  --output-dir=lib/l10n \\\\\\n  --no-use-deferred-loading \\\\\\n  lib/l10n/localization_intl.dart \\\\\\n  res/intl_en_US.arb \\\\\\n  res/intl_vi_VN.arb\\n```\\n\\nYou can see that all the necessary files were generate. In this case, the *l10n* directory look like:\\n```\\n\u251c\u2500\u2500 l10n\\n\u251c\u2500\u2500\u2500\u2500 localization_intl.dart\\n\u251c\u2500\u2500\u2500\u2500 messages_all.dart\\n\u251c\u2500\u2500\u2500\u2500 messages_en_US.dart\\n\u251c\u2500\u2500\u2500\u2500 messages_vi_VN.dart\\n```\\n\\nTo use language specific text in your app, you\'ll simply need to follow the two steps:\\n- Import *MyLocalizations* class where you want to use the text.\\n- Call localized value of text via:\\n\\n```dart\\nMyLocalizations.of(context).welcome\\n// or\\nMyLocalizations.of(context).taskItems(model.taskNumbers)\\n```\\n\\nWhen you call the above methods, it calls the getter of the *MyLocalizations* class and returns its value based on the Locale of the *context*. If the context is en (en_US) it will return the value from *intl_en_US.dart* and same things with another Locale.\\n\\nThat\'s all for this article, you can checkout the source code of the example [at here](https://github.com/devexps/flutter/tree/master/mobile/flutter_localization). This localization method is a little bit complicated and also boring but I think this will improve with time.\\n\\nOkay, I\'ll see you next article and enjoy!"},{"id":"/2019/08/25/first-app-and-basic-structure-in-flutter","metadata":{"permalink":"/2019/08/25/first-app-and-basic-structure-in-flutter","source":"@site/blog/2019-08-25-first-app-and-basic-structure-in-flutter.md","title":"First app and basic structure in Flutter","description":"First app and basic structure in Flutter","date":"2019-08-25T00:00:00.000Z","formattedDate":"August 25, 2019","tags":[{"label":"flutter","permalink":"/tags/flutter"},{"label":"tutorial","permalink":"/tags/tutorial"},{"label":"app","permalink":"/tags/app"}],"readingTime":3.955,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"First app and basic structure in Flutter","description":"First app and basic structure in Flutter","tags":["flutter","tutorial","app"],"hide_table_of_contents":false},"prevItem":{"title":"Localization & switching locales in Flutter","permalink":"/2019/08/27/localization-and-switching-locales-in-flutter"}},"content":"\x3c!--truncate--\x3e\\n\\nFlutter is a new Open Source framework created by Google that focuses on the creation of cross platform application. Flutter primarily targets iOS and Android, but is increasingly adding support for desktop and web platform too.\\n\\nFlutter apps are built using the Dart programming language. If you\'re new to Dart, you may want to start by [getting a general overview](https://dart.dev/guides/language/language-tour) of the language first.\\n\\nIn this article, we\'re going to create our first application and built up ourselves basic application structures.\\n\\n### Installing Flutter\\nWe can install Flutter on our machine in a variety of ways. The easiest way to get started is to download the installer from the Flutter website.\\n\\n- [MacOs](https://flutter.dev/docs/get-started/install/macos)\\n\\n- [Windows](https://flutter.dev/docs/get-started/install/windows)\\n\\n- [Linux](https://docs.flutter.dev/get-started/install/linux)\\n\\n### IDE & Plugins\\nI\'d recommend that you either use Android studio or Visual Studio Code for your Flutter development. Android studio offers and integrated, feature-rich IDE with support for Flutter, whereas Visual Studio Code offers more lightweight, but functional support.\\n\\n- To install the Flutter plugin for Android Studio, open up the plugin preferences using **Preferences > Plugins** on macOS, **File > Settings** > Plugins on Windows & Linux. From there, search for the Flutter plugin within the repository list and click install.\\n- To install the Flutter plugin for Visual Studio Code, search the store for **Flutter** or click install from [the following page](https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter).\\n\\n### Creating a new Flutter apps\\nAssuming that you\'re installed Flutter and have the appropriate dependencies (Android Studio / XCode) installed. We can go ahead and create a new Flutter app. This can be done in numerous ways, but I find the easiest ways are to do it via the Terminal. Let\'s use the terminal in this case:\\n\\n```console\\n$ flutter create hello_flutter\\nCreating project hello_flutter...\\nAll done!\\nIn order to run your application, type:\\n- cd hello_flutter\\n- flutter run\\n```\\n\\n### Launching app\\nAs anticipated, this will go ahead and create a new Flutter project for us and open it up inside of Android Studio. We can then open this using the Flutter plugin for Android Studio.\\n\\nWith default configuration focus on main.dart, simply we\'re hit to choose the simulator (Android or iPhone) for running. I\'ve selected this iOS Simulator for this. We should then see our demo application.\\n\\n<img src=\\"/assets/thoughts/flutter-mobile/hello-flutter/first-run-app.png\\" width=\\"100%\\" alt=\\"flutter first app\\" />\\n\\nAnd now, you\'ll wonder how to write a really application with Flutter. An application has a lot of screens, lots of feature and many processing logic like network, database, etc. Let me suggest you a clearly structure of Flutter project.\\n\\n### Project Structure\\nUsing the state management framework in your project is **Provider**, and apply the architecture of the entire project is as follows\\n\\n<img src=\\"/assets/thoughts/flutter-mobile/hello-flutter/mvp.png\\" width=\\"100%\\" alt=\\"MVP project structure\\" />\\n\\n- The **View** layer is used to display layouts and is a variety of **StatelessWidget** pages wrapped by **ChangeNotifierProvider**.\\n- The **Model** layer is used to process data and is variety of Model classes that inherit **ChangeNotifier**\\n- The **Logic** layer doesn\'t save any data, only logic operation.\\n\\nDoes it look like the **MVP** pattern in Android? In fact, they are all similar, but the names are slightly different. You can also think of the above mode as the MVP mode.\\n\\nFlutter is particularly well suited for this architectural model, because the view changes with the data, you basically don\'t have to care about the View, just go and operate on the data.\\n\\n### Directory Structure\\nThe project directory structure is as follows:\\n```\\n\u251c\u2500\u2500 android\\n\u251c\u2500\u2500 images\\n\u251c\u2500\u2500 ios\\n\u251c\u2500\u2500 lib\\n\u251c\u2500\u2500 local_json\\n\u251c\u2500\u2500 res\\n\u251c\u2500\u2500 ...\\n```\\n\\nDirectory | Explain\\n---|---\\nimages | For storing various pictures\\nlocal_json | I encapsulate the Icon information of Flutter into a Json file and store it in this directory\\nres | Store the language files generated by the \\"intl\\" plugin\\n\\nLet me explain the other directories besides **lib**:\\n```\\n\u251c\u2500\u2500 config\\n\u251c\u2500\u2500 database\\n\u251c\u2500\u2500 l10n\\n\u251c\u2500\u2500 items\\n\u251c\u2500\u2500 json\\n\u251c\u2500\u2500 logic\\n\u251c\u2500\u2500 model\\n\u251c\u2500\u2500 pages\\n\u251c\u2500\u2500 utils\\n\u251c\u2500\u2500 widgets\\n\u251c\u2500\u2500 main.dart\\n```\\n\\nDirectory | Explain\\n---|---\\nconfig | Store various configuration classes\\ndatabase | Store database operation related classes\\nl10n | Class for storing internationalized related operations\\nitems | Item class that stores part of the List list\\njson | Various network requests, databases, etc. related json files\\nlogic | Logic layer directory\\nmodel | Model layer directory\\npages | Store each page, which is the directory of the View layer\\nutils | Packaged tools, such as file operations\\nwidgets | custom widgets\\n\\nI\'d now suggest that you play around with Flutter using this example application. Change the text, do something funky things with the calculations, add new function and enjoy with new project structure. You can also reference the [source code](https://github.com/devexps/flutter/tree/master/mobile/hello_flutter) here!\\n\\nI\'ll see you next article, enjoy!"}]}')}}]);