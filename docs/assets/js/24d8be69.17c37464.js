"use strict";(self.webpackChunkgo_micro=self.webpackChunkgo_micro||[]).push([[8954],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>u});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=a.createContext({}),d=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=d(e.components);return a.createElement(p.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},k=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=d(t),k=l,u=m["".concat(p,".").concat(k)]||m[k]||c[k]||r;return t?a.createElement(u,o(o({ref:n},s),{},{components:t})):a.createElement(u,o({ref:n},s))}));function u(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,o=new Array(r);o[0]=k;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[m]="string"==typeof e?e:l,o[1]=i;for(var d=2;d<r;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}k.displayName="MDXCreateElement"},4446:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var a=t(7462),l=(t(7294),t(3905));const r={title:"Locally deploy Docker development environment",description:"Locally deploy Docker development environment",tags:["deploy","docker","development","environment","local"],image:"/assets/thoughts/devops/develop_docker_deploy/vng19.jpeg",hide_table_of_contents:!1},o=void 0,i={permalink:"/2023/09/09/locally-deploy-docker-development-environment",source:"@site/blog/2023-09-09-locally-deploy-docker-development-environment.md",title:"Locally deploy Docker development environment",description:"Locally deploy Docker development environment",date:"2023-09-09T00:00:00.000Z",formattedDate:"September 9, 2023",tags:[{label:"deploy",permalink:"/tags/deploy"},{label:"docker",permalink:"/tags/docker"},{label:"development",permalink:"/tags/development"},{label:"environment",permalink:"/tags/environment"},{label:"local",permalink:"/tags/local"}],readingTime:11.84,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Locally deploy Docker development environment",description:"Locally deploy Docker development environment",tags:["deploy","docker","development","environment","local"],image:"/assets/thoughts/devops/develop_docker_deploy/vng19.jpeg",hide_table_of_contents:!1},prevItem:{title:"How microservice framework (Go-Micro) runs on Kubernetes cluster",permalink:"/2023/09/25/go-micro-on-kubernetes-cluster"},nextItem:{title:"Go-Micro easily connects to the EFK log system",permalink:"/2023/09/06/go-micro-easily-connects-to-efk-log-system"}},p={authorsImageUrls:[]},d=[{value:"Overview",id:"overview",level:2},{value:"Relational Database",id:"relational-database",level:2},{value:"MySQL",id:"mysql",level:3},{value:"PostgreSQL",id:"postgresql",level:3},{value:"MariaDB",id:"mariadb",level:3},{value:"SQLServer",id:"sqlserver",level:3},{value:"TiDB",id:"tidb",level:3},{value:"Graph database",id:"graph-database",level:2},{value:"Neo4J",id:"neo4j",level:3},{value:"Time series database",id:"time-series-database",level:2},{value:"InfluxDB",id:"influxdb",level:3},{value:"TimescaleDB",id:"timescaledb",level:3},{value:"OpenTSDB",id:"opentsdb",level:3},{value:"QuestDB",id:"questdb",level:3},{value:"TDengine",id:"tdengine",level:3},{value:"ElasticSearch",id:"elasticsearch",level:3},{value:"Clickhouse",id:"clickhouse",level:3},{value:"Doris",id:"doris",level:3},{value:"NoSQL database",id:"nosql-database",level:2},{value:"MongoDB",id:"mongodb",level:3},{value:"Redis",id:"redis",level:3},{value:"Memcached",id:"memcached",level:3},{value:"CouchDB",id:"couchdb",level:3},{value:"Cassandra",id:"cassandra",level:3},{value:"Service Discovery - Registry",id:"service-discovery---registry",level:2},{value:"Etcd",id:"etcd",level:3},{value:"Nacos",id:"nacos",level:3},{value:"Consul",id:"consul",level:3},{value:"Apollo",id:"apollo",level:3},{value:"Message queue",id:"message-queue",level:2},{value:"RabbitMQ",id:"rabbitmq",level:3},{value:"Kafka",id:"kafka",level:3},{value:"With ZooKeeper",id:"with-zookeeper",level:4},{value:"With KRaft",id:"with-kraft",level:4},{value:"NSQ",id:"nsq",level:3},{value:"NATS",id:"nats",level:3},{value:"Mosquitto",id:"mosquitto",level:3},{value:"EMX",id:"emx",level:3},{value:"Pulsar",id:"pulsar",level:3},{value:"HiveMQ",id:"hivemq",level:3},{value:"RocketMQ",id:"rocketmq",level:3},{value:"ActiveMQ",id:"activemq",level:3},{value:"Asynq",id:"asynq",level:3},{value:"Microservice runtime",id:"microservice-runtime",level:2},{value:"Tracing",id:"tracing",level:3},{value:"Zipkin",id:"zipkin",level:3},{value:"Operation and maintenance monitoring",id:"operation-and-maintenance-monitoring",level:2},{value:"Kibana",id:"kibana",level:3},{value:"Prometheus",id:"prometheus",level:3},{value:"Grafana",id:"grafana",level:3},{value:"Logstash",id:"logstash",level:3},{value:"Fluentd",id:"fluentd",level:3},{value:"Streaming computing",id:"streaming-computing",level:2},{value:"Spark",id:"spark",level:3},{value:"Flink",id:"flink",level:3},{value:"Object storage",id:"object-storage",level:2},{value:"MinIO",id:"minio",level:3},{value:"Machine learning",id:"machine-learning",level:2},{value:"TensorFlow",id:"tensorflow",level:3},{value:"References",id:"references",level:2}],s={toc:d},m="wrapper";function c(e){let{components:n,...t}=e;return(0,l.kt)(m,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("admonition",{title:"NOTE",type:"tip"},(0,l.kt)("p",{parentName:"admonition"},"Bash's newlines are ",(0,l.kt)("inlineCode",{parentName:"p"},"\\\\")),(0,l.kt)("p",{parentName:"admonition"},"The newline character of CMD is ",(0,l.kt)("inlineCode",{parentName:"p"},"\\^"))),(0,l.kt)("p",null,"Need to set Host:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# Added by Docker Desktop\n192.168.1.6 host.docker.internal\n192.168.1.6 gateway.docker.internal\n# To allow the same kube context to work on the host and the container:\n192.168.1.6 kubernetes.docker.internal\n# End of section\n")),(0,l.kt)("h2",{id:"relational-database"},"Relational Database"),(0,l.kt)("h3",{id:"mysql"},"MySQL"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/mysql:latest\n\ndocker run -itd \\\n    --name mysql-dev \\\n    -p 3306:3306 \\\n    -e ALLOW_EMPTY_PASSWORD=yes \\\n    -e MYSQL_ROOT_PASSWORD=123456 \\\n    bitnami/mysql:latest\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Default account: ",(0,l.kt)("inlineCode",{parentName:"p"},"root")),(0,l.kt)("p",{parentName:"admonition"},"Default password: ",(0,l.kt)("inlineCode",{parentName:"p"},"123456"))),(0,l.kt)("h3",{id:"postgresql"},"PostgreSQL"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'docker pull bitnami/postgresql:latest\ndocker pull bitnami/postgresql-repmgr:latest\ndocker pull bitnami/pgbouncer:latest\ndocker pull bitnami/pgpool:latest\ndocker pull bitnami/postgres-exporter:latest\n\ndocker run -itd \\\n    --name postgres-dev \\\n    -p 5432:5432 \\\n    -e POSTGRES_PASSWORD=123456 \\\n    bitnami/postgresql:latest\n\ndocker exec -it postgres-dev "apt update"\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},'CREATE EXTENSION IF NOT EXISTS "uuid-ossp";\nCREATE EXTENSION IF NOT EXISTS "postgis";\n\nSELECT version();\nSELECT postgis_full_version();\n')),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Default account: ",(0,l.kt)("inlineCode",{parentName:"p"},"postgres")),(0,l.kt)("p",{parentName:"admonition"},"Default password: ",(0,l.kt)("inlineCode",{parentName:"p"},"123456"))),(0,l.kt)("h3",{id:"mariadb"},"MariaDB"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/mariadb:latest\n\ndocker run -itd \\\n    --name mariadb-dev \\\n    -p 3306:3306 \\\n    -e ALLOW_EMPTY_PASSWORD=yes \\\n    -e MARIADB_ROOT_PASSWORD=123456 \\\n    bitnami/mariadb:latest\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Default account: ",(0,l.kt)("inlineCode",{parentName:"p"},"root")),(0,l.kt)("p",{parentName:"admonition"},"Default password: ",(0,l.kt)("inlineCode",{parentName:"p"},"123456"))),(0,l.kt)("h3",{id:"sqlserver"},"SQLServer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'docker pull mcr.microsoft.com/mssql/server:2019-latest\n\ndocker run -itd \\\n    --name mssql-dev \\\n    -m 512m \\\n    -e "ACCEPT_EULA=Y" \\\n    -e "SA_PASSWORD=Abcd123456789*" \\\n    -p 1433:1433 \\\n    mcr.microsoft.com/mssql/server:2019-latest\n')),(0,l.kt)("h3",{id:"tidb"},"TiDB"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull pingcap/tidb:latest\ndocker pull pingcap/tikv:latest\ndocker pull pingcap/pd:latest\n\ndocker run -itd \\\n    --name tidb-dev \\\n    -v /data/tidb/data:/tmp/tidb \\\n    --privileged=true \\\n    -p 4000:4000 \\\n    -p 10080:10080 \\\n    pingcap/tidb:latest\n")),(0,l.kt)("h2",{id:"graph-database"},"Graph database"),(0,l.kt)("h3",{id:"neo4j"},"Neo4J"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/neo4j:latest\n\ndocker run -itd \\\n    --name neo4j-dev \\\n    -p 7473:7473 \\\n    -p 7687:7687 \\\n    -p 7474:7474 \\\n    -e NEO4J_PASSWORD=123456 \\\n    bitnami/neo4j:latest\n")),(0,l.kt)("h2",{id:"time-series-database"},"Time series database"),(0,l.kt)("h3",{id:"influxdb"},"InfluxDB"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/influxdb:latest\n\ndocker run -itd \\\n    --name influxdb-dev \\\n    -p 8083:8083 \\\n    -p 8086:8086 \\\n    -e INFLUXDB_HTTP_AUTH_ENABLED=true \\\n    -e INFLUXDB_ADMIN_USER=admin \\\n    -e INFLUXDB_ADMIN_USER_PASSWORD=123456789 \\\n    -e INFLUXDB_ADMIN_USER_TOKEN=admintoken123 \\\n    -e INFLUXDB_DB=my_database \\\n    bitnami/influxdb:latest\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create user \"admin\" with password '123456789' with all privileges\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Management tool: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:8086/"))),(0,l.kt)("h3",{id:"timescaledb"},"TimescaleDB"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull timescale/timescaledb:latest-pg14\ndocker pull timescale/timescaledb:latest-pg15\ndocker pull timescale/timescaledb-postgis:latest-pg13\ndocker pull timescale/pg_prometheus:latest-pg11\n\ndocker run -itd \\\n    --name timescale-dev \\\n    -p 5432:5432 \\\n    -e POSTGRES_PASSWORD=123456 \\\n    timescale/timescaledb:latest-pg15\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Default account: ",(0,l.kt)("inlineCode",{parentName:"p"},"postgres")),(0,l.kt)("p",{parentName:"admonition"},"Default password: ",(0,l.kt)("inlineCode",{parentName:"p"},"123456"))),(0,l.kt)("h3",{id:"opentsdb"},"OpenTSDB"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull petergrace/opentsdb-docker:latest\n\ndocker run -itd \\\n    --name opentsdb-dev \\\n    -p 4242:4242 \\\n    petergrace/opentsdb-docker:latest\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Management tool: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:4242"))),(0,l.kt)("h3",{id:"questdb"},"QuestDB"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull questdb/questdb:latest\n\ndocker run -itd \\\n    --name questdb-dev \\\n    -p 9000:9000 \\\n    -p 8812:8812 \\\n    -p 9009:9009 \\\n    questdb/questdb:latest\n")),(0,l.kt)("h3",{id:"tdengine"},"TDengine"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull tdengine/tdengine:latest\n\ndocker run -itd \\\n    --name tdengine-dev \\\n    -p 6030-6041:6030-6041 \\\n    -p 6030-6041:6030-6041/udp \\\n    tdengine/tdengine:latest\n")),(0,l.kt)("h3",{id:"elasticsearch"},"ElasticSearch"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/elasticsearch:latest\n\ndocker run -itd \\\n    --name elasticsearch-dev \\\n    -p 9200:9200 \\\n    -p 9300:9300 \\\n    -e ELASTICSEARCH_USERNAME=elastic \\\n    -e ELASTICSEARCH_PASSWORD=elastic \\\n    -e xpack.security.enabled=true \\\n    -e discovery.type=single-node \\\n    -e http.cors.enabled=true \\\n    -e http.cors.allow-origin=http://localhost:13580,http://127.0.0.1:13580 \\\n    -e http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization \\\n    -e http.cors.allow-credentials=true \\\n    bitnami/elasticsearch:latest\n\ndocker pull appbaseio/dejavu:latest\n\ndocker run -itd \\\n    --name dejavu-test \\\n    -p 13580:1358 \\\n    appbaseio/dejavu:latest\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Management tool: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:13580/"))),(0,l.kt)("h3",{id:"clickhouse"},"Clickhouse"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull yandex/clickhouse-server:latest\ndocker pull clickhouse/clickhouse-server:latest\n\n# 8123 is http interface; 9000 is tcp interface; 9004 is mysql interface\n# It is recommended to use DBeaver as the client\ndocker run -itd \\\n    --name clickhouse-server-dev \\\n    -p 8123:8123 \\\n    -p 9000:9000 \\\n    -p 9004:9004 \\\n    --network=app-tier \\\n    --ulimit \\\n    nofile=262144:262144 \\\n    clickhouse/clickhouse-server:latest\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Default account: ",(0,l.kt)("inlineCode",{parentName:"p"},"default")),(0,l.kt)("p",{parentName:"admonition"},"Password: none")),(0,l.kt)("h3",{id:"doris"},"Doris"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'docker pull apache/doris:1.2.2-be-x86_64\ndocker pull apache/doris:1.2.2-fe-x86_64\n\ndocker network create --driver bridge --subnet=127.0.0.1/24 doris-network\n\ndocker run -itd \\\n    --name=doris-fe-dev \\\n    --env FE_SERVERS="fe1:127.0.0.1:9010" \\\n    --env FE_ID=1 \\\n    -p 8030:8030 \\\n    -p 9030:9030 \\\n    -v /data/fe/doris-meta:/opt/apache-doris/fe/doris-meta \\\n    -v /data/fe/conf:/opt/apache-doris/fe/conf \\\n    -v /data/fe/log:/opt/apache-doris/fe/log \\\n    --network=doris-network \\\n    --ip=127.0.0.1 \\\n    apache/doris:1.2.2-fe-x86_64\n\ndocker run -itd \\\n    --name=doris-be-dev \\\n    --env FE_SERVERS="fe1:127.0.0.1:9010" \\\n    --env BE_ADDR="127.0.0.1:9050" \\\n    -p 8040:8040 \\\n    -v /data/be/storage:/opt/apache-doris/be/storage \\\n    -v /data/be/conf:/opt/apache-doris/be/conf \\\n    -v /data/be/log:/opt/apache-doris/be/log \\\n    --network=doris-network \\\n    --ip=127.0.0.1 \\\n    apache/doris:1.2.2-be-x86_64\n')),(0,l.kt)("h2",{id:"nosql-database"},"NoSQL database"),(0,l.kt)("h3",{id:"mongodb"},"MongoDB"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/mongodb:latest\ndocker pull bitnami/mongodb-exporter:latest\n\ndocker run -itd \\\n    --name mongodb-dev \\\n    -p 27017:27017 \\\n    -e MONGODB_ROOT_USER=root \\\n    -e MONGODB_ROOT_PASSWORD=123456 \\\n    -e MONGODB_USERNAME=test \\\n    -e MONGODB_PASSWORD=123456 \\\n    -e MONGODB_DATABASE=test \\\n    bitnami/mongodb:latest\n")),(0,l.kt)("h3",{id:"redis"},"Redis"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/redis:latest\ndocker pull bitnami/redis-exporter:latest\n\ndocker run -itd \\\n    --name redis-server-dev \\\n    -p 6379:6379 \\\n    -e ALLOW_EMPTY_PASSWORD=yes \\\n    bitnami/redis:latest\n")),(0,l.kt)("h3",{id:"memcached"},"Memcached"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/memcached:latest\ndocker pull bitnami/memcached-exporter:latest\n\ndocker run -itd \\\n    --name memcached-dev \\\n    -p 11211:11211 \\\n    bitnami/memcached:latest\n")),(0,l.kt)("h3",{id:"couchdb"},"CouchDB"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/couchdb:latest\n\ndocker run -itd \\\n    --name couchdb-dev \\\n    -p 5984:5984  \\\n    -p 9100:9100  \\\n    -e COUCHDB_PORT_NUMBER=5984\n    -e COUCHDB_CLUSTER_PORT_NUMBER=9100\n    -e COUCHDB_USER=admin\n    -e COUCHDB_PASSWORD=couchdb\n    bitnami/couchdb:latest\n")),(0,l.kt)("h3",{id:"cassandra"},"Cassandra"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/cassandra:latest\ndocker pull bitnami/cassandra-exporter:latest\n\ndocker run -itd \\\n    --name cassandra-dev \\\n    -p 7000:7000  \\\n    -p 9042:9042  \\\n    -e CASSANDRA_USER=cassandra \\\n    -e CASSANDRA_PASSWORD=cassandra \\\n    bitnami/cassandra:latest\n")),(0,l.kt)("h2",{id:"service-discovery---registry"},"Service Discovery - Registry"),(0,l.kt)("h3",{id:"etcd"},"Etcd"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/etcd:latest\n\ndocker run -itd \\\n    --name etcd-standalone-dev \\\n    -p 2379:2379 \\\n    -p 2380:2380 \\\n    -e ETCDCTL_API=3 \\\n    -e ALLOW_NONE_AUTHENTICATION=yes \\\n    -e ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379 \\\n    bitnami/etcd:latest\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Management tool: ",(0,l.kt)("a",{parentName:"p",href:"https://www.electronjs.org/apps/etcd-manager"},"etcd-manager"))),(0,l.kt)("h3",{id:"nacos"},"Nacos"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull nacos/nacos-server:latest\n\ndocker run -itd \\\n    --name nacos-standalone-dev \\\n    -e MODE=standalone \\\n    -p 8849:8848 \\\n    nacos/nacos-server:latest\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Management tool: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:8849/nacos/index.html"))),(0,l.kt)("h3",{id:"consul"},"Consul"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/consul:latest\ndocker pull bitnami/consul-exporter:latest\n\ndocker run -itd \\\n    --name consul-standalone-dev \\\n    -p 8300:8300 \\\n    -p 8500:8500 \\\n    -p 8600:8600/udp \\\n    -e CONSUL_BIND_INTERFACE='eth0' \\\n    -e CONSUL_AGENT_MODE=server \\\n    -e CONSUL_ENABLE_UI=true \\\n    -e CONSUL_BOOTSTRAP_EXPECT=1 \\\n    -e CONSUL_CLIENT_LAN_ADDRESS=0.0.0.0 \\\n    bitnami/consul:latest\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Management tool: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:8500"))),(0,l.kt)("h3",{id:"apollo"},"Apollo"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'docker pull apolloconfig/apollo-portal:latest\ndocker pull apolloconfig/apollo-configservice:latest\ndocker pull apolloconfig/apollo-adminservice:latest\n\ndocker run -itd \\\n    --name apollo-configservice-dev \\\n    -p 8080:8080 \\\n    -e SPRING_DATASOURCE_URL="jdbc:mysql://127.0.0.1:3306/ApolloConfigDB?characterEncoding=utf8" \\\n    -e SPRING_DATASOURCE_USERNAME=root \\\n    -e SPRING_DATASOURCE_PASSWORD=123456 \\\n    -v /tmp/logs:/opt/logs \\\n    apolloconfig/apollo-configservice:latest\n\ndocker run -itd \\\n    --name apollo-adminservice-dev \\\n    -p 8090:8090 \\\n    -e SPRING_DATASOURCE_URL="jdbc:mysql://127.0.0.1:3306/ApolloConfigDB?characterEncoding=utf8" \\\n    -e SPRING_DATASOURCE_USERNAME=root \\\n    -e SPRING_DATASOURCE_PASSWORD=123456 \\\n    -v /tmp/logs:/opt/logs \\\n    apolloconfig/apollo-adminservice:latest\n\ndocker run -itd \\\n    --name apollo-portal-dev \\\n    -p 8070:8070 \\\n    -e SPRING_DATASOURCE_URL="jdbc:mysql://127.0.0.1:3306/ApolloPortalDB?characterEncoding=utf8" \\\n    -e SPRING_DATASOURCE_USERNAME=root \\\n    -e SPRING_DATASOURCE_PASSWORD=123456 \\\n    -e APOLLO_PORTAL_ENVS=dev \\\n    -e DEV_META=http://127.0.0.1:8080 \\\n    -v /tmp/logs:/opt/logs \\\n    apolloconfig/apollo-portal:latest\n')),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Management tool: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:8070")),(0,l.kt)("p",{parentName:"admonition"},"Account / Password: ",(0,l.kt)("inlineCode",{parentName:"p"},"apollo")," / ",(0,l.kt)("inlineCode",{parentName:"p"},"admin"))),(0,l.kt)("h2",{id:"message-queue"},"Message queue"),(0,l.kt)("h3",{id:"rabbitmq"},"RabbitMQ"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/rabbitmq:latest\n\ndocker run -itd \\\n    --hostname localhost \\\n    --name rabbitmq-dev \\\n    -p 15672:15672 \\\n    -p 5672:5672 \\\n    -p 1883:1883 \\\n    -p 15675:15675 \\\n    -e RABBITMQ_PLUGINS=rabbitmq_top,rabbitmq_mqtt,rabbitmq_web_mqtt,rabbitmq_prometheus,rabbitmq_stomp,rabbitmq_auth_backend_http \\\n    bitnami/rabbitmq:latest\n\n# View plugin list\nrabbitmq-plugins list\n# rabbitmq_peer_discovery_consul \nrabbitmq-plugins --offline enable rabbitmq_peer_discovery_consul\n# rabbitmq_mqtt provides interaction with backend services, port 1883\nrabbitmq-plugins enable rabbitmq_mqtt\n# rabbitmq_web_mqtt provides interaction with the front end, port 15675\nrabbitmq-plugins enable rabbitmq_web_mqtt\n# rabbitmq_auth_backend_http is enabled and configured to authenticate with RabbitMQ\nrabbitmq-plugins enable rabbitmq_auth_backend_http\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Management tool: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:15672")),(0,l.kt)("p",{parentName:"admonition"},"Account / Password: ",(0,l.kt)("inlineCode",{parentName:"p"},"user")," / ",(0,l.kt)("inlineCode",{parentName:"p"},"bitnami"))),(0,l.kt)("h3",{id:"kafka"},"Kafka"),(0,l.kt)("h4",{id:"with-zookeeper"},"With ZooKeeper"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/zookeeper:latest\ndocker pull bitnami/kafka:latest\ndocker pull bitnami/kafka-exporter:latest\n\ndocker run -itd \\\n    --name zookeeper-server-dev \\\n    --network app-tier \\\n    -p 2181:2181 \\\n    -e ALLOW_ANONYMOUS_LOGIN=yes \\\n    bitnami/zookeeper:latest\n\ndocker run -itd \\\n    --name kafka-standalone-dev \\\n    --link zookeeper-server-dev \\\n    --network app-tier \\\n    -p 9092:9092 \\\n    -v /home/data/kafka:/bitnami/kafka \\\n    -e KAFKA_ENABLE_KRAFT=no \\\n    -e KAFKA_BROKER_ID=1 \\\n    -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \\\n    -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://host.docker.internal:9092 \\\n    -e KAFKA_ZOOKEEPER_CONNECT=zookeeper-server-dev:2181 \\\n    -e ALLOW_PLAINTEXT_LISTENER=yes \\\n    --user root \\\n    bitnami/kafka:latest\n")),(0,l.kt)("h4",{id:"with-kraft"},"With KRaft"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/kafka:latest\n\ndocker run -itd \\\n    --name kafka-standalone-dev \\\n    --user root \\\n    -p 9092:9092 \\\n    -p 9093:9093 \\\n    -v /home/data/kafka:/bitnami/kafka \\\n    -e KAFKA_ENABLE_KRAFT=yes \\\n    -e KAFKA_BROKER_ID=1 \\\n    -e KAFKA_CFG_PROCESS_ROLES=broker,controller \\\n    -e KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER \\\n    -e KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@host.docker.internal:9093 \\\n    -e KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT \\\n    -e KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093 \\\n    -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://host.docker.internal:9092 \\\n    -e ALLOW_PLAINTEXT_LISTENER=yes \\\n    bitnami/kafka:latest\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Management tool: ",(0,l.kt)("a",{parentName:"p",href:"https://www.kafkatool.com/download.html"},"Offset Explorer"))),(0,l.kt)("h3",{id:"nsq"},"NSQ"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull nsqio/nsq:latest\n\n# nsqlookupd\ndocker run -d \\\n    --name nsqlookupd \\\n    -p 4160:4160 \\\n    -p 4161:4161 \\\n    nsqio/nsq:latest \\\n    /nsqlookupd\n\n# nsqd\ndocker run -itd \\\n    --name nsqd \\\n    -p 4150:4150 \\\n    -p 4151:4151 \\\n    --link nsqlookupd \\\n    nsqio/nsq:latest \\\n    /nsqd --lookupd-tcp-address=nsqlookupd:4160\n\n#nsqadmin\ndocker run -itd \\\n    --name nsqadmin \\\n    -p 4171:4171 \\\n    --link nsqlookupd \\\n    nsqio/nsq:latest \\\n    /nsqadmin --lookupd-http-address=nsqlookupd:4161\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Console access address: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://127.0.0.1:4171")),(0,l.kt)("p",{parentName:"admonition"},"Directly use the REST API to view node information: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://127.0.0.1:4161/nodes"))),(0,l.kt)("h3",{id:"nats"},"NATS"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/nats:latest\ndocker pull bitnami/nats-exporter:latest\n\ndocker run -itd \\\n    --name nats-server \\\n    --p 4222:4222 \\\n    --p 6222:6222 \\\n    --p 8000:8222 \\\n    -e NATS_HTTP_PORT_NUMBER=8222 \\\n    bitnami/nats:latest\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Management tool: ",(0,l.kt)("inlineCode",{parentName:"p"},"https://127.0.0.1:8000"))),(0,l.kt)("h3",{id:"mosquitto"},"Mosquitto"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull eclipse-mosquitto:latest\n\n# 1883 tcp\n# 9001 websockets\ndocker run -itd \\\n    --name mosquitto-dev \\\n    -p 1883:1883 \\\n    -p 9001:9001 \\\n    eclipse-mosquitto:latest\n")),(0,l.kt)("h3",{id:"emx"},"EMX"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull emqx/emqx:latest\n\ndocker run -itd \\\n    --name emqx-dev \\\n    --add-host=host.docker.internal:host-gateway \\\n    -p 18083:18083 \\\n    -p 1883:1883 \\\n    emqx/emqx:latest\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Management tool: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:18083")),(0,l.kt)("p",{parentName:"admonition"},"Account / Password: ",(0,l.kt)("inlineCode",{parentName:"p"},"admin")," / ",(0,l.kt)("inlineCode",{parentName:"p"},"public"))),(0,l.kt)("h3",{id:"pulsar"},"Pulsar"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull apachepulsar/pulsar-manager:latest\ndocker pull apachepulsar/pulsar:latest\n\ndocker run -itd \\\n    -p 6650:6650 \\\n    -p 8080:8080 \\\n    --name pulsar-standalone \\\n    apachepulsar/pulsar:latest bin/pulsar standalone\n\ndocker run -itd \\\n    -p 9527:9527 \\\n    -p 7750:7750 \\\n    -e SPRING_CONFIGURATION_FILE=/pulsar-manager/pulsar-manager/application.properties \\\n    apachepulsar/pulsar-manager:latest\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull apachepulsar/pulsar-standalone:latest\n\ndocker run -itd \\\n    -p 6650:6650 \\\n    -p 8080:8080 \\\n    -p 9527:9527 \\\n    --name pulsar-standalone \\\n    apachepulsar/pulsar:latest bin/pulsar standalone\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Management tool: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:9527"))),(0,l.kt)("h3",{id:"hivemq"},"HiveMQ"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull hivemq/hivemq4:latest\n\ndocker run -itd \\\n    --name hivemq-dev \\\n    --ulimit nofile=500000:500000 \\\n    -p 8080:8080 \\\n    -p 8000:8000 \\\n    -p 1883:1883 \\\n    hivemq/hivemq4:latest\n")),(0,l.kt)("h3",{id:"rocketmq"},"RocketMQ"),(0,l.kt)("p",null,"At least one NameServer and one Broker must be started."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'docker pull apache/rocketmq:latest\n\n# NameServer\ndocker run -d \\\n      --name rmqnamesrv \\\n      -e "JAVA_OPT_EXT=-Xms512M -Xmx512M -Xmn128m" \\\n      -p 9876:9876 \\\n      apache/rocketmq:latest \\\n      sh mqnamesrv\n\n# Broker\ndocker run -d \\\n      --name rmqbroker \\\n      -e "JAVA_OPT_EXT=-Xms512M -Xmx512M -Xmn128m" \\\n      -p 10911:10911 -p 10909:10909 \\\n      --link rmqnamesrv \\\n      -e "NAMESRV_ADDR=rmqnamesrv:9876" \\\n      apache/rocketmq:latest \\\n      sh mqbroker\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'docker pull styletang/rocketmq-console-ng:latest\n\ndocker run -d \\\n    --name rmqconsole \\\n    -p 9800:8080 \\\n    --link rmqnamesrv \\\n    -e "JAVA_OPTS=-Drocketmq.namesrv.addr=rmqnamesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false" \\\n    -t styletang/rocketmq-console-ng:latest\n')),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Console access address: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:9800/#/"))),(0,l.kt)("h3",{id:"activemq"},"ActiveMQ"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull rmohr/activemq:latest\n\ndocker run -d \\\n      --name activemq-dev \\\n      -p 61616:61616 \\\n      -p 8161:8161 \\\n      -p 61613:61613 \\\n      -p 1883:1883 \\\n      -p 61614:61614 \\\n      rmohr/activemq:latest\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Port number"),(0,l.kt)("th",{parentName:"tr",align:null},"Protocol"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"61616"),(0,l.kt)("td",{parentName:"tr",align:null},"JMS")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"8161"),(0,l.kt)("td",{parentName:"tr",align:null},"UI")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"5672"),(0,l.kt)("td",{parentName:"tr",align:null},"AMQP")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"61613"),(0,l.kt)("td",{parentName:"tr",align:null},"STOMP")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1883"),(0,l.kt)("td",{parentName:"tr",align:null},"MQTT")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"61614"),(0,l.kt)("td",{parentName:"tr",align:null},"WS")))),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Admin tool: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:8161/admin/")),(0,l.kt)("p",{parentName:"admonition"},"Account / Password: ",(0,l.kt)("inlineCode",{parentName:"p"},"admin")," / ",(0,l.kt)("inlineCode",{parentName:"p"},"admin"))),(0,l.kt)("h3",{id:"asynq"},"Asynq"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull hibiken/asynqmon:latest\n\ndocker run -d \\\n    --name asynq-dev \\\n    -p 8080:8080 \\\n    hibiken/asynqmon:latest --redis-addr=host.docker.internal:6379\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Management tool: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:8080"))),(0,l.kt)("h2",{id:"microservice-runtime"},"Microservice runtime"),(0,l.kt)("h3",{id:"tracing"},"Tracing"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull jaegertracing/all-in-one:latest\n\ndocker run -itd \\\n    --name jaeger-dev \\\n    -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \\\n    -e COLLECTOR_OTLP_ENABLED=true \\\n    -p 6831:6831/udp \\\n    -p 6832:6832/udp \\\n    -p 5778:5778 \\\n    -p 16686:16686 \\\n    -p 4317:4317 \\\n    -p 4318:4318 \\\n    -p 14250:14250 \\\n    -p 14268:14268 \\\n    -p 14269:14269 \\\n    -p 9411:9411 \\\n    jaegertracing/all-in-one:latest\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Port number"),(0,l.kt)("th",{parentName:"tr",align:null},"Protocol"),(0,l.kt)("th",{parentName:"tr",align:null},"Components"),(0,l.kt)("th",{parentName:"tr",align:null},"Function"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"6831"),(0,l.kt)("td",{parentName:"tr",align:null},"UDP"),(0,l.kt)("td",{parentName:"tr",align:null},"agent"),(0,l.kt)("td",{parentName:"tr",align:null},"Thrift-compact protocol (used by most SDKs)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"6832"),(0,l.kt)("td",{parentName:"tr",align:null},"UDP"),(0,l.kt)("td",{parentName:"tr",align:null},"agent"),(0,l.kt)("td",{parentName:"tr",align:null},"Thrift-binary protocol (used by Node.js SDK)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"5775"),(0,l.kt)("td",{parentName:"tr",align:null},"UDP"),(0,l.kt)("td",{parentName:"tr",align:null},"agent"),(0,l.kt)("td",{parentName:"tr",align:null},"Thrift-compact protocol (deprecated)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"5778"),(0,l.kt)("td",{parentName:"tr",align:null},"HTTP"),(0,l.kt)("td",{parentName:"tr",align:null},"agent"),(0,l.kt)("td",{parentName:"tr",align:null},"Service configuration interface (sampling, etc.)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"16686"),(0,l.kt)("td",{parentName:"tr",align:null},"HTTP"),(0,l.kt)("td",{parentName:"tr",align:null},"Query"),(0,l.kt)("td",{parentName:"tr",align:null},"Service front end for Jaeger Web UI")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4317"),(0,l.kt)("td",{parentName:"tr",align:null},"HTTP"),(0,l.kt)("td",{parentName:"tr",align:null},"Collector"),(0,l.kt)("td",{parentName:"tr",align:null},"If enabled, receive OpenTelemetry Protocol (OTLP) over gRPC")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4318"),(0,l.kt)("td",{parentName:"tr",align:null},"HTTP"),(0,l.kt)("td",{parentName:"tr",align:null},"Collector"),(0,l.kt)("td",{parentName:"tr",align:null},"If enabled, receive OpenTelemetry Protocol (OTLP) over HTTP")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"14268"),(0,l.kt)("td",{parentName:"tr",align:null},"HTTP"),(0,l.kt)("td",{parentName:"tr",align:null},"Collector"),(0,l.kt)("td",{parentName:"tr",align:null},"Receive clients directly")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"14269"),(0,l.kt)("td",{parentName:"tr",align:null},"HTTP"),(0,l.kt)("td",{parentName:"tr",align:null},"Collector"),(0,l.kt)("td",{parentName:"tr",align:null},"Provides: health check ",(0,l.kt)("inlineCode",{parentName:"td"},"/"),", performance check ",(0,l.kt)("inlineCode",{parentName:"td"},"/metrics"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"14250"),(0,l.kt)("td",{parentName:"tr",align:null},"HTTP"),(0,l.kt)("td",{parentName:"tr",align:null},"Collector"),(0,l.kt)("td",{parentName:"tr",align:null},"Take over ",(0,l.kt)("inlineCode",{parentName:"td"},"model.proto"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"9411"),(0,l.kt)("td",{parentName:"tr",align:null},"HTTP"),(0,l.kt)("td",{parentName:"tr",align:null},"Collector"),(0,l.kt)("td",{parentName:"tr",align:null},"Zipkin-compatible http endpoint (optional)")))),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"API: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:14268/api/traces")),(0,l.kt)("p",{parentName:"admonition"},"Management tool: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:16686"))),(0,l.kt)("h3",{id:"zipkin"},"Zipkin"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull openzipkin/zipkin:latest\n\ndocker run -d \\\n    --name zipkin-dev \\\n    -p 9411:9411 \\\n    openzipkin/zipkin:latest\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"API: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:9411/api/v2/spans")),(0,l.kt)("p",{parentName:"admonition"},"Management tool: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:9411"))),(0,l.kt)("h2",{id:"operation-and-maintenance-monitoring"},"Operation and maintenance monitoring"),(0,l.kt)("h3",{id:"kibana"},"Kibana"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/kibana:latest\n\ndocker run -d \\\n    --name kibana-dev \\\n    -p 5601:5601 \\\n    -e KIBANA_ELASTICSEARCH_URL=elasticsearch \\\n    -e KIBANA_ELASTICSEARCH_PORT_NUMBER=9200 \\\n    bitnami/kibana:latest\n")),(0,l.kt)("h3",{id:"prometheus"},"Prometheus"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/prometheus:latest\ndocker pull bitnami/pushgateway:latest\n\ndocker run -d \\\n    --name prometheus-gateway \\\n    -p 9091:9091 \\\n    bitnami/pushgateway:latest\n\ndocker run -d \\\n    --name prometheus \\\n    -p 9090:9090 \\\n    bitnami/prometheus:latest\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Prometheus tool: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:9090")),(0,l.kt)("p",{parentName:"admonition"},"Push gateway tool: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:9091"))),(0,l.kt)("h3",{id:"grafana"},"Grafana"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/grafana:latest\n\ndocker run -d \\\n    --name grafana \\\n    -p 3000:3000 \\\n    -e GF_SECURITY_ADMIN_PASSWORD=pass \\\n    bitnami/grafana:latest\n")),(0,l.kt)("h3",{id:"logstash"},"Logstash"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/logstash:latest\ndocker pull bitnami/logstash-exporter:latest\n\ndocker run -d \\\n    --name logstash \\\n    -p 8080:8080 \\\n    bitnami/logstash:latest\n")),(0,l.kt)("h3",{id:"fluentd"},"Fluentd"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/fluentd:latest\n\ndocker run -d \\\n    --name fluentd \\\n    -p 24224:24224 \\\n    -p 24224:24224/udp \\\n    -v /data:/opt/bitnami/fluentd/log \\\n    bitnami/fluentd:latest\n")),(0,l.kt)("h2",{id:"streaming-computing"},"Streaming computing"),(0,l.kt)("h3",{id:"spark"},"Spark"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/spark:latest\n\ndocker run -itd \\\n    --name spark-standalone \\\n    -p 6066:6066 \\\n    -p 7077:7077 \\\n    -p 8080:8080 \\\n    -p 50070:50070 \\\n    -e SPARK_MODE=master \\\n    -e SPARK_WORKER_CORES=1 \\\n    -e SPARK_WORKER_MEMORY=2g \\\n    bitnami/spark:latest\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"HDFS web interface: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:50070")),(0,l.kt)("p",{parentName:"admonition"},"Spark interface: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:8080"))),(0,l.kt)("h3",{id:"flink"},"Flink"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'docker pull flink:latest\n\ndocker network create flink-network\n\ndocker run -itd \\\n    --name flink-jobmanager \\\n    --network flink-network \\\n    -p 8081:8081 \\\n    --env FLINK_PROPERTIES="jobmanager.rpc.address: flink-jobmanager" \\\n    flink:latest jobmanager\n\ndocker run -itd \\\n    --name flink-taskmanager \\\n    --network flink-network \\\n    --env FLINK_PROPERTIES="jobmanager.rpc.address: flink-jobmanager" \\\n    flink:latest taskmanager\n')),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Management tool: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:8081"))),(0,l.kt)("h2",{id:"object-storage"},"Object storage"),(0,l.kt)("h3",{id:"minio"},"MinIO"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'docker pull bitnami/minio:latest\n\ndocker network create app-tier --driver bridge\n\n# MINIO_ROOT_USER minimum 3 characters\n# MINIO_ROOT_PASSWORD minimum 8 characters\n# When running for the first time, the service will automatically shut down, and it can run normally after restarting manually.\ndocker run -itd \\\n    --name minio-server \\\n    -p 9000:9000 \\\n    -p 9001:9001 \\\n    --env MINIO_ROOT_USER="root" \\\n    --env MINIO_ROOT_PASSWORD="123456789" \\\n    --env MINIO_DEFAULT_BUCKETS=\'images,videos\' \\\n    --env MINIO_FORCE_NEW_KEYS="yes" \\\n    --env BITNAMI_DEBUG=true \\\n    --volume /usr/local/minio/data:/data \\\n    --network app-tier \\\n    bitnami/minio:latest\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'docker pull minio/minio:latest\n\n# MINIO_ROOT_USER minimum 3 characters, default: minioadmin\n# MINIO_ROOT_PASSWORD minimum 8 characters, default: minioadmin\ndocker run -itd \\\n    --name minio-server \\\n    -p 9000:9000 \\\n    -p 9001:9001 \\\n    -e "MINIO_ROOT_USER=root" \\\n    -e "MINIO_ROOT_PASSWORD=123456789" \\\n    -v /usr/local/minio/data:/data \\\n    --network app-tier \\\n    minio/minio server /data --console-address \':9001\'\n')),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Management tool: ",(0,l.kt)("inlineCode",{parentName:"p"},"http://localhost:9001/login"))),(0,l.kt)("h2",{id:"machine-learning"},"Machine learning"),(0,l.kt)("h3",{id:"tensorflow"},"TensorFlow"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"docker pull bitnami/tensorflow-resnet:latest\ndocker pull bitnami/tensorflow-serving:latest\ndocker pull bitnami/tensorflow-inception:latest\n\ndocker network create app-tier --driver bridge\n\ndocker run -d --name tensorflow-serving \\\n    --volume /tmp/model-data:/bitnami/model-data \\\n    --network app-tier \\\n    bitnami/tensorflow-serving:latest\n\ndocker run -d --name tensorflow-resnet \\\n    --volume /tmp/model-data:/bitnami/model-data \\\n    --network app-tier \\\n    bitnami/tensorflow-resnet:latest\n")),(0,l.kt)("h2",{id:"references"},"References"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://db-engines.com/en/ranking/time+series+dbms"},"https://db-engines.com/en/ranking/time+series+dbms"))))}c.isMDXComponent=!0}}]);