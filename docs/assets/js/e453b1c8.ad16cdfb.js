"use strict";(self.webpackChunkgo_micro=self.webpackChunkgo_micro||[]).push([[8892],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>h});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(o),d=r,h=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return o?n.createElement(h,a(a({ref:t},c),{},{components:o})):n.createElement(h,a({ref:t},c))}));function h(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=o.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,a[1]=l;for(var u=2;u<i;u++)a[u]=o[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},5298:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var n=o(7462),r=(o(7294),o(3905));const i={title:"Contribution",description:"Go-Micro contribution",keywords:["Go","Go-Micro","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"],sidebar_position:1},a="Contribution",l={unversionedId:"community/contribution",id:"community/contribution",title:"Contribution",description:"Go-Micro contribution",source:"@site/docs-go-micro/community/contribution.md",sourceDirName:"community",slug:"/community/contribution",permalink:"/go-micro/community/contribution",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Contribution",description:"Go-Micro contribution",keywords:["Go","Go-Micro","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"],sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Community",permalink:"/go-micro/category/community"}},s={},u=[{value:"Bug fixed",id:"bug-fixed",level:2},{value:"How to submit code",id:"how-to-submit-code",level:2},{value:"Commit rules",id:"commit-rules",level:2},{value:"type",id:"type",level:3},{value:"Main types",id:"main-types",level:4},{value:"Other types",id:"other-types",level:4},{value:"scope",id:"scope",level:3},{value:"description",id:"description",level:3},{value:"body",id:"body",level:3},{value:"footer",id:"footer",level:3},{value:"Commit examples",id:"commit-examples",level:3},{value:"Commit message only",id:"commit-message-only",level:4},{value:"Needs attention",id:"needs-attention",level:4},{value:"Contains all structures",id:"contains-all-structures",level:4}],c={toc:u},p="wrapper";function m(e){let{components:t,...o}=e;return(0,r.kt)(p,(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"contribution"},"Contribution"),(0,r.kt)("p",null,"This community hopes to get help from developers from all over the world, so I also hope you'd take a few minutes to read this guild before filling an issue or pull request."),(0,r.kt)("h2",{id:"bug-fixed"},"Bug fixed"),(0,r.kt)("p",null,"Go-Micro uses Github Issues to manage issues. If you want to submit a bug report or help fix a bug, please to make sure to search the existing issues and pull requests."),(0,r.kt)("p",null,"When submitting a bug report, please use the issue template we provide to clearly describe the problem encountered and how to reproduce it. If it is convenient, it's best to provide a minimal reproduction warehouse."),(0,r.kt)("h2",{id:"how-to-submit-code"},"How to submit code"),(0,r.kt)("p",null,"If you have never committed code on Github, please follow the steps below:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"First, please fork the project into your own Github account."),(0,r.kt)("li",{parentName:"ul"},"Then create a new feature branch based on the ",(0,r.kt)("strong",{parentName:"li"},"main branch")," and named it after the feature like: ",(0,r.kt)("strong",{parentName:"li"},"feature-test")),(0,r.kt)("li",{parentName:"ul"},"Write your code."),(0,r.kt)("li",{parentName:"ul"},"Submit the code to the remote branch"),(0,r.kt)("li",{parentName:"ul"},"Submit a PR request in Github"),(0,r.kt)("li",{parentName:"ul"},"Merge into ",(0,r.kt)("strong",{parentName:"li"},"main branch")," after waiting for review")),(0,r.kt)("h2",{id:"commit-rules"},"Commit rules"),(0,r.kt)("p",null,"Follow ",(0,r.kt)("a",{parentName:"p",href:"https://www.conventionalcommits.org/en/v1.0.0/#summary"},"Conventional Commits")," to normalize the commit message"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note that: when you submit a PR request, first ensure that the code uses the correct coding specification and has a complete test cases. It's best to associate the related issues in the submitted PR information to reduce the workload of reviewers.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n")),(0,r.kt)("h3",{id:"type"},"type"),(0,r.kt)("p",null,"There are the following commit types:"),(0,r.kt)("h4",{id:"main-types"},"Main types"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"fix"),": A fix bugs"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"feat"),": A new feature"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"deps"),": Changes external dependencies"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"break"),": Changes has break change")),(0,r.kt)("h4",{id:"other-types"},"Other types"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"docs"),": Documentation only changes"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"refactor"),": A code change that neither fixes a bug nor adds a feature"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"style"),": Changes that do not affect the meaning of the code (white-space, formatting, etc)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"test"),": Adding missing tests or correcting existing tests"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"chore")," Daily work, examples, etc."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ci"),": Changes to our CI configuration files and scripts")),(0,r.kt)("h3",{id:"scope"},"scope"),(0,r.kt)("p",null,"The following is the list of supported scopes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"transport"),(0,r.kt)("li",{parentName:"ul"},"examples"),(0,r.kt)("li",{parentName:"ul"},"middleware"),(0,r.kt)("li",{parentName:"ul"},"config"),(0,r.kt)("li",{parentName:"ul"},"cmd"),(0,r.kt)("li",{parentName:"ul"},"etc.")),(0,r.kt)("h3",{id:"description"},"description"),(0,r.kt)("p",null,"Clearly describe what the submitted code does in short sentences."),(0,r.kt)("h3",{id:"body"},"body"),(0,r.kt)("p",null,"Extra notes, used to describe reasons, purposes, implementation logic, etc., can be omitted."),(0,r.kt)("h3",{id:"footer"},"footer"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"When there is an incompatible (breaking change) update, it is necessary to describe the reason and the scope of impact.")),(0,r.kt)("li",{parentName:"ul"},"Associate related issues, such as Refs #123."),(0,r.kt)("li",{parentName:"ul"},"Links to PRs for documentation updates and updates for other modules that may be involved.")),(0,r.kt)("h3",{id:"commit-examples"},"Commit examples"),(0,r.kt)("h4",{id:"commit-message-only"},"Commit message only"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"fix: The log debug level should be -1\n")),(0,r.kt)("h4",{id:"needs-attention"},"Needs attention"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"refactor!(transport/http): replacement underlying implementation\n")),(0,r.kt)("h4",{id:"contains-all-structures"},"Contains all structures"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"fix(log): [BREAKING-CHANGE] unable to meet the requirement of log Library\n\nExplain the reason, purpose, realization method, etc.\n\nClose #111\nDoc change on doc/#222\nBREAKING CHANGE:\n   Breaks log.info api, log_api.log should be used instead\n")))}m.isMDXComponent=!0}}]);