"use strict";(self.webpackChunkgo_micro=self.webpackChunkgo_micro||[]).push([[1304],{3905:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>u});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function p(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},s=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),g=c(t),m=o,u=g["".concat(l,".").concat(m)]||g[m]||d[m]||i;return t?n.createElement(u,a(a({ref:r},s),{},{components:t})):n.createElement(u,a({ref:r},s))}));function u(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var p={};for(var l in r)hasOwnProperty.call(r,l)&&(p[l]=r[l]);p.originalType=e,p[g]="string"==typeof e?e:o,a[1]=p;for(var c=2;c<i;c++)a[c]=t[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1113:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var n=t(7462),o=(t(7294),t(3905));const i={title:"Dependency Injection",description:"Wire is a compile-time dependency injection tool",keywords:["Go","Go-Micro","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"],sidebar_position:2},a=void 0,p={unversionedId:"guide/wire",id:"guide/wire",title:"Dependency Injection",description:"Wire is a compile-time dependency injection tool",source:"@site/docs-go-micro/guide/wire.md",sourceDirName:"guide",slug:"/guide/wire",permalink:"/go-micro/guide/wire",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Dependency Injection",description:"Wire is a compile-time dependency injection tool",keywords:["Go","Go-Micro","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"],sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Protobuf specification",permalink:"/go-micro/guide/api-protobuf"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"Terms",id:"terms",level:2},{value:"Usage",id:"usage",level:2},{value:"Component Initialization",id:"component-initialization",level:2},{value:"References",id:"references",level:2}],s={toc:c},g="wrapper";function d(e){let{components:r,...t}=e;return(0,o.kt)(g,(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Wire")," is a compile-time dependency injection tool."),(0,o.kt)("p",null,"In dependencies between individual components, explicit initialization is generally encouraged rather than global variable passing."),(0,o.kt)("p",null,"Therefore, the initialization code through ",(0,o.kt)("strong",{parentName:"p"},"wire")," can well solve the coupling between components and improve code maintainability."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Import into project\ngo get -u github.com/google/wire\n\n# Install cmd\ngo install github.com/google/wire/cmd/wire\n")),(0,o.kt)("h2",{id:"terms"},"Terms"),(0,o.kt)("p",null,"Wire has two basic concepts: ",(0,o.kt)("em",{parentName:"p"},"Provider")," and ",(0,o.kt)("em",{parentName:"p"},"Injector")),(0,o.kt)("p",null,"Provider is an ordinary ",(0,o.kt)("em",{parentName:"p"},"Go Func"),", it can also receive the values from other ",(0,o.kt)("em",{parentName:"p"},"providers")," for dependency injection."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"// This provides a data config file.\nfunc NewConfig() *conf.Data {...}\n\n// This provides the data component (installs database, cache, etc.) which depends on the data config.\nfunc NewData(c *conf.Data) (*Data, error) {...}\n\n// This provides persistence components which depends on the data component.\nfunc NewUserRepo(d *data.Data) (*UserRepo, error) {...}\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"In Go-Micro project, there are four major modules, ",(0,o.kt)("strong",{parentName:"p"},"server"),", ",(0,o.kt)("strong",{parentName:"p"},"service"),", ",(0,o.kt)("strong",{parentName:"p"},"biz")," and ",(0,o.kt)("strong",{parentName:"p"},"data"),". They will be initialized by ",(0,o.kt)("em",{parentName:"p"},"wire"),"."),(0,o.kt)("img",{src:"/assets/docs/go-micro/wire.png",alt:"go-micro wire usage",width:"650px"}),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",{parentName:"p"},"ProvideSet")," should be provided in every module so that wire could scan them and generate the DI (",(0,o.kt)("inlineCode",{parentName:"p"},"Dependency Injection"),") codes."),(0,o.kt)("p",null,"First, you should define ",(0,o.kt)("strong",{parentName:"p"},"ProviderSet")," in the entry (recommended in ",(0,o.kt)("inlineCode",{parentName:"p"},"init.go")," file) of every module."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"internal/data   // the data module\n\u251c\u2500\u2500 data.go     // func NewData(cfg *conf.Bootstrap, logger log.Logger) (*Data, func(), error)\n\u251c\u2500\u2500 greeter.go  // func NewGreeterRepo(data *Data, logger log.Logger) GreeterRepo\n\u2514\u2500\u2500 init.go     // var ProviderSet = wire.NewSet(NewData, NewGreeterRepo)\n\n")),(0,o.kt)("p",null,"Then put these ",(0,o.kt)("strong",{parentName:"p"},"ProviderSet")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"wire.go")," file for DI configuration."),(0,o.kt)("h2",{id:"component-initialization"},"Component Initialization"),(0,o.kt)("p",null,"To initialize components through wire, you need to define the corresponding ",(0,o.kt)("inlineCode",{parentName:"p"},"wire.go")," and Go-Micro application for startup management."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"cmd     // the entry point of the application\n\u2514\u2500\u2500 server\n    \u251c\u2500\u2500 main.go\n    \u251c\u2500\u2500 wire.go\n    \u2514\u2500\u2500 wire_gen.go\n\n// main.go creates the go-micro application for lifecycle management\nfunc newApp(ll log.Logger, hs *http.Server, gs *grpc.Server, rr registry.Registrar) *micro.App {\n    return micro.New(\n        micro.ID(Service.GetInstanceId()),\n        micro.Name(Service.Name),\n        micro.Version(Service.Version),\n        micro.Metadata(Service.Metadata),\n        micro.Logger(ll),\n        micro.Server(\n            hs,\n            gs,\n        ),\n        micro.Registrar(rr),\n    )\n}\n\n// wire.go init micro application.\nfunc initApp(log.Logger, registry.Registrar, *conf.Bootstrap) (*micro.App, func(), error) {\n    // builds ProvideSet in every module, and generate the wire_gen.go file\n    panic(wire.Build(server.ProviderSet, data.ProviderSet, biz.ProviderSet, service.ProviderSet, newApp))\n}\n")),(0,o.kt)("p",null,"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"go generate")," command in main service directory to generate DI codes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"go generate ./...\n")),(0,o.kt)("p",null,"The DI codes inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"wire_gen.go")," look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"// initApp init micro application.\nfunc initApp(logger log.Logger, registrar registry.Registrar, bootstrap *conf.Bootstrap) (*micro.App, func(), error) {\n    dataData, cleanup, err := data.NewData(bootstrap, logger)\n    if err != nil {\n        return nil, nil, err\n    }\n    greeterRepo := data.NewGreeterRepo(dataData, logger)\n    greeterUseCase := biz.NewGreeterUseCase(greeterRepo, logger)\n    greeterService := service.NewGreeterService(greeterUseCase)\n    httpServer := server.NewHTTPServer(bootstrap, logger, greeterService)\n    grpcServer := server.NewGRPCServer(bootstrap, logger, greeterService)\n    app := newApp(logger, httpServer, grpcServer, registrar)\n    return app, func() {\n        cleanup()\n    }, nil\n}\n")),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://blog.golang.org/wire"},"https://blog.golang.org/wire")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/google/wire"},"https://github.com/google/wire"))))}d.isMDXComponent=!0}}]);